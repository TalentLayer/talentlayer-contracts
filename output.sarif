{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "informationUri": "https://github.com/crytic/slither",
          "version": "0.9.1",
          "rules": [
            {
              "id": "0-0-arbitrary-send-erc20",
              "name": "arbitrary-send-erc20",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Arbitrary `from` in transferFrom"
              },
              "help": {
                "text": "\nUse `msg.sender` as `from` in transferFrom.\n"
              }
            },
            {
              "id": "0-1-arbitrary-send-eth",
              "name": "arbitrary-send-eth",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Functions that send Ether to arbitrary destinations"
              },
              "help": {
                "text": "Ensure that an arbitrary user cannot withdraw unauthorized funds."
              }
            },
            {
              "id": "0-0-incorrect-shift",
              "name": "incorrect-shift",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Incorrect shift in assembly."
              },
              "help": {
                "text": "Swap the order of parameters."
              }
            },
            {
              "id": "0-1-unchecked-transfer",
              "name": "unchecked-transfer",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Unchecked transfer"
              },
              "help": {
                "text": "Use `SafeERC20`, or ensure that the transfer/transferFrom return value is checked."
              }
            },
            {
              "id": "1-1-divide-before-multiply",
              "name": "divide-before-multiply",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Divide before multiply"
              },
              "help": {
                "text": "Consider ordering multiplication before division."
              }
            },
            {
              "id": "1-1-reentrancy-no-eth",
              "name": "reentrancy-no-eth",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "1-0-tautology",
              "name": "tautology",
              "properties": {
                "precision": "very-high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Tautology or contradiction"
              },
              "help": {
                "text": "Fix the incorrect comparison by changing the value type or the comparison."
              }
            },
            {
              "id": "1-1-uninitialized-local",
              "name": "uninitialized-local",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Uninitialized local variables"
              },
              "help": {
                "text": "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability."
              }
            },
            {
              "id": "1-1-unused-return",
              "name": "unused-return",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unused return"
              },
              "help": {
                "text": "Ensure that all the return values of the function calls are used."
              }
            },
            {
              "id": "2-0-shadowing-local",
              "name": "shadowing-local",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Local variable shadowing"
              },
              "help": {
                "text": "Rename the local variables that shadow another component."
              }
            },
            {
              "id": "2-1-events-maths",
              "name": "events-maths",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Missing events arithmetic"
              },
              "help": {
                "text": "Emit an event for critical parameter changes."
              }
            },
            {
              "id": "2-1-missing-zero-check",
              "name": "missing-zero-check",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Missing zero address validation"
              },
              "help": {
                "text": "Check that the address is not zero."
              }
            },
            {
              "id": "2-0-variable-scope",
              "name": "variable-scope",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Pre-declaration usage of local variables"
              },
              "help": {
                "text": "Move all variable declarations prior to any usage of the variable, and ensure that reaching a variable declaration does not depend on some conditional if it is used unconditionally."
              }
            },
            {
              "id": "2-1-reentrancy-benign",
              "name": "reentrancy-benign",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-reentrancy-events",
              "name": "reentrancy-events",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-timestamp",
              "name": "timestamp",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Block timestamp"
              },
              "help": {
                "text": "Avoid relying on `block.timestamp`."
              }
            },
            {
              "id": "3-0-assembly",
              "name": "assembly",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Assembly usage"
              },
              "help": {
                "text": "Do not use `evm` assembly."
              }
            },
            {
              "id": "3-0-pragma",
              "name": "pragma",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Different pragma directives are used"
              },
              "help": {
                "text": "Use one Solidity version."
              }
            },
            {
              "id": "3-1-dead-code",
              "name": "dead-code",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Dead-code"
              },
              "help": {
                "text": "Remove unused functions."
              }
            },
            {
              "id": "3-0-solc-version",
              "name": "solc-version",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Incorrect versions of Solidity"
              },
              "help": {
                "text": "\nDeploy with any of the following Solidity versions:\n- 0.5.16 - 0.5.17\n- 0.6.11 - 0.6.12\n- 0.7.5 - 0.7.6\n- 0.8.16\n\nThe recommendations take into account:\n- Risks related to recent releases\n- Risks of complex code generation changes\n- Risks of new language features\n- Risks of known bugs\n\nUse a simple pragma version that allows any of these versions.\nConsider using the latest version of Solidity for testing."
              }
            },
            {
              "id": "3-0-low-level-calls",
              "name": "low-level-calls",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Low-level calls"
              },
              "help": {
                "text": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence."
              }
            },
            {
              "id": "3-0-missing-inheritance",
              "name": "missing-inheritance",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Missing inheritance"
              },
              "help": {
                "text": "Inherit from the missing interface or contract."
              }
            },
            {
              "id": "3-0-naming-convention",
              "name": "naming-convention",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Conformance to Solidity naming conventions"
              },
              "help": {
                "text": "Follow the Solidity [naming convention](https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions)."
              }
            },
            {
              "id": "3-1-reentrancy-unlimited-gas",
              "name": "reentrancy-unlimited-gas",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "3-1-similar-names",
              "name": "similar-names",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Variable names too similar"
              },
              "help": {
                "text": "Prevent variables from having similar names."
              }
            },
            {
              "id": "3-1-too-many-digits",
              "name": "too-many-digits",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Too many digits"
              },
              "help": {
                "text": "\nUse:\n- [Ether suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#ether-units),\n- [Time suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#time-units), or\n- [The scientific notation](https://solidity.readthedocs.io/en/latest/types.html#rational-and-integer-literals)\n"
              }
            },
            {
              "id": "3-0-unimplemented-functions",
              "name": "unimplemented-functions",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Unimplemented functions"
              },
              "help": {
                "text": "Implement all unimplemented functions in any contract you intend to use directly (not simply inherit from)."
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "0-0-arbitrary-send-erc20",
          "message": {
            "text": "TalentLayerEscrow._deposit(address,address,uint256) (contracts/TalentLayerEscrow.sol#469-471) uses arbitrary from in transferFrom: require(bool,string)(IERC20(_token).transferFrom(_sender,address(this),_amount),Transfer must not fail) (contracts/TalentLayerEscrow.sol#470)\n",
            "markdown": "[TalentLayerEscrow._deposit(address,address,uint256)](contracts/TalentLayerEscrow.sol#L469-L471) uses arbitrary from in transferFrom: [require(bool,string)(IERC20(_token).transferFrom(_sender,address(this),_amount),Transfer must not fail)](contracts/TalentLayerEscrow.sol#L470)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 469,
                  "endLine": 471
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f89344e66b7e16a864f5d81a72516a1db1e4429497b62151e93c50f403099f78"
          }
        },
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "TalentLayerEscrow._reimburse(TalentLayerEscrow.Transaction,uint256) (contracts/TalentLayerEscrow.sol#520-533) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(_transaction.sender).transfer(totalReleaseAmount) (contracts/TalentLayerEscrow.sol#526)\n",
            "markdown": "[TalentLayerEscrow._reimburse(TalentLayerEscrow.Transaction,uint256)](contracts/TalentLayerEscrow.sol#L520-L533) sends eth to arbitrary user\n\tDangerous calls:\n\t- [address(_transaction.sender).transfer(totalReleaseAmount)](contracts/TalentLayerEscrow.sol#L526)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 520,
                  "endLine": 533
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "68d4dc56327eab31c0c714befd6224bb78f4200fac8d8c9582c3c7174df8b93c"
          }
        },
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "TalentLayerPlatformID.withdraw() (contracts/TalentLayerPlatformID.sol#181-184) sends eth to arbitrary user\n\tDangerous calls:\n\t- (sent) = address(msg.sender).call{value: address(this).balance}() (contracts/TalentLayerPlatformID.sol#182)\n",
            "markdown": "[TalentLayerPlatformID.withdraw()](contracts/TalentLayerPlatformID.sol#L181-L184) sends eth to arbitrary user\n\tDangerous calls:\n\t- [(sent) = address(msg.sender).call{value: address(this).balance}()](contracts/TalentLayerPlatformID.sol#L182)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 184
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6b7665c722a6651a19436c0b467ed0575036297e113365140ba2e47da5d72ce1"
          }
        },
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "TalentLayerEscrow._release(TalentLayerEscrow.Transaction,uint256) (contracts/TalentLayerEscrow.sol#479-511) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(_transaction.receiver).transfer(_releaseAmount) (contracts/TalentLayerEscrow.sol#496)\n",
            "markdown": "[TalentLayerEscrow._release(TalentLayerEscrow.Transaction,uint256)](contracts/TalentLayerEscrow.sol#L479-L511) sends eth to arbitrary user\n\tDangerous calls:\n\t- [address(_transaction.receiver).transfer(_releaseAmount)](contracts/TalentLayerEscrow.sol#L496)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 479,
                  "endLine": 511
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8635719949d1543f65ad7c4048430f2be906c5340fc7141a0a342be5d79357e6"
          }
        },
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "TalentLayerArbitrator._giveRuling(uint256,uint256) (contracts/TalentLayerArbitrator.sol#90-100) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(dispute.fee) (contracts/TalentLayerArbitrator.sol#98)\n",
            "markdown": "[TalentLayerArbitrator._giveRuling(uint256,uint256)](contracts/TalentLayerArbitrator.sol#L90-L100) sends eth to arbitrary user\n\tDangerous calls:\n\t- [address(msg.sender).transfer(dispute.fee)](contracts/TalentLayerArbitrator.sol#L98)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 100
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ee3937a8240d9689ed8aa14b8f82c5b8a57fcfc57b953690201ea3e6fd43f9c5"
          }
        },
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "TalentLayerEscrow._transferBalance(address,address,uint256) (contracts/TalentLayerEscrow.sol#600-606) sends eth to arbitrary user\n\tDangerous calls:\n\t- _recipient.transfer(_amount) (contracts/TalentLayerEscrow.sol#602)\n",
            "markdown": "[TalentLayerEscrow._transferBalance(address,address,uint256)](contracts/TalentLayerEscrow.sol#L600-L606) sends eth to arbitrary user\n\tDangerous calls:\n\t- [_recipient.transfer(_amount)](contracts/TalentLayerEscrow.sol#L602)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 600,
                  "endLine": 606
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f516a66d0c7e6ade5b13356533aa1db5aa24a369333f749b70e870fa8bd97bb0"
          }
        },
        {
          "ruleId": "0-0-incorrect-shift",
          "message": {
            "text": "ERC721A._burn(uint256,bool) (contracts/libs/ERC721A.sol#971-1037) contains an incorrect shift operation: _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1 (contracts/libs/ERC721A.sol#1004)\n",
            "markdown": "[ERC721A._burn(uint256,bool)](contracts/libs/ERC721A.sol#L971-L1037) contains an incorrect shift operation: [_packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1](contracts/libs/ERC721A.sol#L1004)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 971,
                  "endLine": 1037
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1820a4e1aceebaaa031a61d9c4a35189b000ea182ad05f69e10a36cc510fa3c6"
          }
        },
        {
          "ruleId": "0-0-incorrect-shift",
          "message": {
            "text": "ERC721A._mint(address,uint256) (contracts/libs/ERC721A.sol#793-851) contains an incorrect shift operation: _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1) (contracts/libs/ERC721A.sol#808)\n",
            "markdown": "[ERC721A._mint(address,uint256)](contracts/libs/ERC721A.sol#L793-L851) contains an incorrect shift operation: [_packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1)](contracts/libs/ERC721A.sol#L808)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 793,
                  "endLine": 851
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aad92fe265e44167d0ec000ce8c9e8b742e810737faa2c235bae20178422971b"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "TalentLayerEscrow._transferBalance(address,address,uint256) (contracts/TalentLayerEscrow.sol#600-606) ignores return value by IERC20(_tokenAddress).transfer(_recipient,_amount) (contracts/TalentLayerEscrow.sol#604)\n",
            "markdown": "[TalentLayerEscrow._transferBalance(address,address,uint256)](contracts/TalentLayerEscrow.sol#L600-L606) ignores return value by [IERC20(_tokenAddress).transfer(_recipient,_amount)](contracts/TalentLayerEscrow.sol#L604)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 600,
                  "endLine": 606
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f1450a83a5554cbf15d2e84b1ab58361b3efbfb56191ddfaf5938eca63a34c4"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Base64.encode(bytes) (node_modules/@openzeppelin/contracts/utils/Base64.sol#20-91) performs a multiplication on the result of a division:\n\t- result = new string(4 * ((data.length + 2) / 3)) (node_modules/@openzeppelin/contracts/utils/Base64.sol#36)\n",
            "markdown": "[Base64.encode(bytes)](node_modules/@openzeppelin/contracts/utils/Base64.sol#L20-L91) performs a multiplication on the result of a division:\n\t- [result = new string(4 * ((data.length + 2) / 3))](node_modules/@openzeppelin/contracts/utils/Base64.sol#L36)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Base64.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95be972726fcc019f39a709af912977edc181dc178420fa602c9fabc2ded06cd"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in TalentLayerPlatformID.mint(string) (contracts/TalentLayerPlatformID.sol#117-120):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerPlatformID.sol#118)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tState variables written after the call(s):\n\t- _afterMint(_platformName) (contracts/TalentLayerPlatformID.sol#119)\n\t\t- takenNames[_platformName] = true (contracts/TalentLayerPlatformID.sol#197)\n\tTalentLayerPlatformID.takenNames (contracts/TalentLayerPlatformID.sol#36) can be used in cross function reentrancies:\n\t- TalentLayerPlatformID._afterMint(string) (contracts/TalentLayerPlatformID.sol#192-200)\n\t- TalentLayerPlatformID.canMint(string,address) (contracts/TalentLayerPlatformID.sol#283-290)\n\t- TalentLayerPlatformID.takenNames (contracts/TalentLayerPlatformID.sol#36)\n",
            "markdown": "Reentrancy in [TalentLayerPlatformID.mint(string)](contracts/TalentLayerPlatformID.sol#L117-L120):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerPlatformID.sol#L118)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tState variables written after the call(s):\n\t- [_afterMint(_platformName)](contracts/TalentLayerPlatformID.sol#L119)\n\t\t- [takenNames[_platformName] = true](contracts/TalentLayerPlatformID.sol#L197)\n\t[TalentLayerPlatformID.takenNames](contracts/TalentLayerPlatformID.sol#L36) can be used in cross function reentrancies:\n\t- [TalentLayerPlatformID._afterMint(string)](contracts/TalentLayerPlatformID.sol#L192-L200)\n\t- [TalentLayerPlatformID.canMint(string,address)](contracts/TalentLayerPlatformID.sol#L283-L290)\n\t- [TalentLayerPlatformID.takenNames](contracts/TalentLayerPlatformID.sol#L36)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "16a4240bd03ea94674541b603aaa0300a1f8dedc1d5734bbf9aac302e40717e2"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in TalentLayerID.mint(uint256,string) (contracts/TalentLayerID.sol#140-143):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerID.sol#141)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tState variables written after the call(s):\n\t- _afterMint(_handle,false,_platformId) (contracts/TalentLayerID.sol#142)\n\t\t- takenHandles[_handle] = true (contracts/TalentLayerID.sol#261)\n\tTalentLayerID.takenHandles (contracts/TalentLayerID.sol#41) can be used in cross function reentrancies:\n\t- TalentLayerID._afterMint(string,bool,uint256) (contracts/TalentLayerID.sol#256-264)\n\t- TalentLayerID.canMint(string,uint256) (contracts/TalentLayerID.sol#325-333)\n\t- TalentLayerID.takenHandles (contracts/TalentLayerID.sol#41)\n",
            "markdown": "Reentrancy in [TalentLayerID.mint(uint256,string)](contracts/TalentLayerID.sol#L140-L143):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerID.sol#L141)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tState variables written after the call(s):\n\t- [_afterMint(_handle,false,_platformId)](contracts/TalentLayerID.sol#L142)\n\t\t- [takenHandles[_handle] = true](contracts/TalentLayerID.sol#L261)\n\t[TalentLayerID.takenHandles](contracts/TalentLayerID.sol#L41) can be used in cross function reentrancies:\n\t- [TalentLayerID._afterMint(string,bool,uint256)](contracts/TalentLayerID.sol#L256-L264)\n\t- [TalentLayerID.canMint(string,uint256)](contracts/TalentLayerID.sol#L325-L333)\n\t- [TalentLayerID.takenHandles](contracts/TalentLayerID.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 143
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "400459a3e7ff7228cc1e1713cf777934c43bfb231278814b70438af628c85eb7"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in TalentLayerID.mintWithPoh(uint256,string) (contracts/TalentLayerID.sol#150-156):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerID.sol#152)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tState variables written after the call(s):\n\t- _afterMint(_handle,true,_platformId) (contracts/TalentLayerID.sol#155)\n\t\t- takenHandles[_handle] = true (contracts/TalentLayerID.sol#261)\n\tTalentLayerID.takenHandles (contracts/TalentLayerID.sol#41) can be used in cross function reentrancies:\n\t- TalentLayerID._afterMint(string,bool,uint256) (contracts/TalentLayerID.sol#256-264)\n\t- TalentLayerID.canMint(string,uint256) (contracts/TalentLayerID.sol#325-333)\n\t- TalentLayerID.takenHandles (contracts/TalentLayerID.sol#41)\n",
            "markdown": "Reentrancy in [TalentLayerID.mintWithPoh(uint256,string)](contracts/TalentLayerID.sol#L150-L156):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerID.sol#L152)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tState variables written after the call(s):\n\t- [_afterMint(_handle,true,_platformId)](contracts/TalentLayerID.sol#L155)\n\t\t- [takenHandles[_handle] = true](contracts/TalentLayerID.sol#L261)\n\t[TalentLayerID.takenHandles](contracts/TalentLayerID.sol#L41) can be used in cross function reentrancies:\n\t- [TalentLayerID._afterMint(string,bool,uint256)](contracts/TalentLayerID.sol#L256-L264)\n\t- [TalentLayerID.canMint(string,uint256)](contracts/TalentLayerID.sol#L325-L333)\n\t- [TalentLayerID.takenHandles](contracts/TalentLayerID.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9408dd00b64af1ea17af310b7daddfb9e6c047cbae649ee9926347ba7f8ab746"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in TalentLayerPlatformID.mintForAddress(string,address) (contracts/TalentLayerPlatformID.sol#128-131):\n\tExternal calls:\n\t- _safeMint(_platformAddress,1) (contracts/TalentLayerPlatformID.sol#129)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tState variables written after the call(s):\n\t- _afterMint(_platformName) (contracts/TalentLayerPlatformID.sol#130)\n\t\t- takenNames[_platformName] = true (contracts/TalentLayerPlatformID.sol#197)\n\tTalentLayerPlatformID.takenNames (contracts/TalentLayerPlatformID.sol#36) can be used in cross function reentrancies:\n\t- TalentLayerPlatformID._afterMint(string) (contracts/TalentLayerPlatformID.sol#192-200)\n\t- TalentLayerPlatformID.canMint(string,address) (contracts/TalentLayerPlatformID.sol#283-290)\n\t- TalentLayerPlatformID.takenNames (contracts/TalentLayerPlatformID.sol#36)\n",
            "markdown": "Reentrancy in [TalentLayerPlatformID.mintForAddress(string,address)](contracts/TalentLayerPlatformID.sol#L128-L131):\n\tExternal calls:\n\t- [_safeMint(_platformAddress,1)](contracts/TalentLayerPlatformID.sol#L129)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tState variables written after the call(s):\n\t- [_afterMint(_platformName)](contracts/TalentLayerPlatformID.sol#L130)\n\t\t- [takenNames[_platformName] = true](contracts/TalentLayerPlatformID.sol#L197)\n\t[TalentLayerPlatformID.takenNames](contracts/TalentLayerPlatformID.sol#L36) can be used in cross function reentrancies:\n\t- [TalentLayerPlatformID._afterMint(string)](contracts/TalentLayerPlatformID.sol#L192-L200)\n\t- [TalentLayerPlatformID.canMint(string,address)](contracts/TalentLayerPlatformID.sol#L283-L290)\n\t- [TalentLayerPlatformID.takenNames](contracts/TalentLayerPlatformID.sol#L36)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 131
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9d26cd1db1ecfeea8889ba1ff9a29216d7334c4e5d832e2e1e528b475e87c1f0"
          }
        },
        {
          "ruleId": "1-0-tautology",
          "message": {
            "text": "TalentLayerReview._mint(uint256,uint256,uint256,string,uint256) (contracts/TalentLayerReview.sol#242-259) contains a tautology or contradiction:\n\t- require(bool,string)(_rating <= 5 && _rating >= 0,TalentLayerReview: invalid rating) (contracts/TalentLayerReview.sol#250)\n",
            "markdown": "[TalentLayerReview._mint(uint256,uint256,uint256,string,uint256)](contracts/TalentLayerReview.sol#L242-L259) contains a tautology or contradiction:\n\t- [require(bool,string)(_rating <= 5 && _rating >= 0,TalentLayerReview: invalid rating)](contracts/TalentLayerReview.sol#L250)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 259
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c1c35502be1590fe9eaa229564ad994a6d7c7c514837110443e61a6ceb65611"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TalentLayerPlatformID.getPlatformIdFromAddress(address).ownedTokenId (contracts/TalentLayerPlatformID.sol#88) is a local variable never initialized\n",
            "markdown": "[TalentLayerPlatformID.getPlatformIdFromAddress(address).ownedTokenId](contracts/TalentLayerPlatformID.sol#L88) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "08977fc350f29db4c9ab09d00dea06a891a679fcfcb313319bac1aae9878d6fc"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TalentLayerID.walletOfOwner(address).ownedTokenId (contracts/TalentLayerID.sol#95) is a local variable never initialized\n",
            "markdown": "[TalentLayerID.walletOfOwner(address).ownedTokenId](contracts/TalentLayerID.sol#L95) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f3a0c4817e2aaa95fce0919ca8c09faf0d2546c0b1ec40329d2a3ab61648c5d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TalentLayerPlatformID.getPlatformIdFromAddress(address).latestOwnerAddress (contracts/TalentLayerPlatformID.sol#90) is a local variable never initialized\n",
            "markdown": "[TalentLayerPlatformID.getPlatformIdFromAddress(address).latestOwnerAddress](contracts/TalentLayerPlatformID.sol#L90) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b1ea10fe7b5b003f5436e4d028d24887d2e72ba3e6bcd34316b574a3ef7ba0c5"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TalentLayerID.walletOfOwner(address).latestOwnerAddress (contracts/TalentLayerID.sol#97) is a local variable never initialized\n",
            "markdown": "[TalentLayerID.walletOfOwner(address).latestOwnerAddress](contracts/TalentLayerID.sol#L97) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f4bd76c04faa28b55055437fc01435324e4a86b72536e3d97ebcee02c5e3ddd1"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes) (contracts/TalentLayerReview.sol#166-188) ignores return value by IERC721Receiver(_to).onERC721Received(_msgSender(),_from,_tokenId,_data) (contracts/TalentLayerReview.sol#173-184)\n",
            "markdown": "[TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes)](contracts/TalentLayerReview.sol#L166-L188) ignores return value by [IERC721Receiver(_to).onERC721Received(_msgSender(),_from,_tokenId,_data)](contracts/TalentLayerReview.sol#L173-L184)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 188
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b3d6a25b622968512999d12e2466730d41b41dd2f42e45f71b168e6f87c1791"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC721A._checkContractOnERC721Received(address,address,uint256,bytes) (contracts/libs/ERC721A.sol#758-777) ignores return value by ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n",
            "markdown": "[ERC721A._checkContractOnERC721Received(address,address,uint256,bytes)](contracts/libs/ERC721A.sol#L758-L777) ignores return value by [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 758,
                  "endLine": 777
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e6096b04a71c8ab622f4b52f528f6182240ff56b936fc816e1b3b58dcfa3bf44"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "TalentLayerID.walletOfOwner(address)._owner (contracts/TalentLayerID.sol#94) shadows:\n\t- Ownable._owner (node_modules/@openzeppelin/contracts/access/Ownable.sol#21) (state variable)\n",
            "markdown": "[TalentLayerID.walletOfOwner(address)._owner](contracts/TalentLayerID.sol#L94) shadows:\n\t- [Ownable._owner](node_modules/@openzeppelin/contracts/access/Ownable.sol#L21) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42b7c45025c44e81bb518a5b8d5f55882d0f0bcc3445bd6e11c5564e88fed14f"
          }
        },
        {
          "ruleId": "2-1-events-maths",
          "message": {
            "text": "TalentLayerArbitrator.setArbitrationPrice(uint256) (contracts/TalentLayerArbitrator.sol#39-41) should emit an event for: \n\t- arbitrationPrice = _arbitrationPrice (contracts/TalentLayerArbitrator.sol#40) \n",
            "markdown": "[TalentLayerArbitrator.setArbitrationPrice(uint256)](contracts/TalentLayerArbitrator.sol#L39-L41) should emit an event for: \n\t- [arbitrationPrice = _arbitrationPrice](contracts/TalentLayerArbitrator.sol#L40) \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "08fca57f1558eeb8551d9a760bae8f3b7fe96d045ae9ab5702cb2b79de50bbba"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "TalentLayerEscrow.updateProtocolWallet(address)._protocolWallet (contracts/TalentLayerEscrow.sol#260) lacks a zero-check on :\n\t\t- protocolWallet = _protocolWallet (contracts/TalentLayerEscrow.sol#261)\n",
            "markdown": "[TalentLayerEscrow.updateProtocolWallet(address)._protocolWallet](contracts/TalentLayerEscrow.sol#L260) lacks a zero-check on :\n\t\t- [protocolWallet = _protocolWallet](contracts/TalentLayerEscrow.sol#L261)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 260,
                  "endLine": 260
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fae74b819e688925c8d0ced6396e0298e25804623473476509e212b3cfd8c760"
          }
        },
        {
          "ruleId": "2-0-variable-scope",
          "message": {
            "text": "Variable 'ERC721A._checkContractOnERC721Received(address,address,uint256,bytes).retval (contracts/libs/ERC721A.sol#765)' in ERC721A._checkContractOnERC721Received(address,address,uint256,bytes) (contracts/libs/ERC721A.sol#758-777) potentially used before declaration: retval == ERC721A__IERC721Receiver(to).onERC721Received.selector (contracts/libs/ERC721A.sol#767)\n",
            "markdown": "Variable '[ERC721A._checkContractOnERC721Received(address,address,uint256,bytes).retval](contracts/libs/ERC721A.sol#L765)' in [ERC721A._checkContractOnERC721Received(address,address,uint256,bytes)](contracts/libs/ERC721A.sol#L758-L777) potentially used before declaration: [retval == ERC721A__IERC721Receiver(to).onERC721Received.selector](contracts/libs/ERC721A.sol#L767)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 765,
                  "endLine": 765
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "06c765a61d89bc5126b04aa60f4ae06a041c3993621d9d716418383810ce08c6"
          }
        },
        {
          "ruleId": "2-0-variable-scope",
          "message": {
            "text": "Variable 'TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes).retval (contracts/TalentLayerReview.sol#173)' in TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes) (contracts/TalentLayerReview.sol#166-188) potentially used before declaration: retval == IERC721Receiver.onERC721Received.selector (contracts/TalentLayerReview.sol#174)\n",
            "markdown": "Variable '[TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes).retval](contracts/TalentLayerReview.sol#L173)' in [TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes)](contracts/TalentLayerReview.sol#L166-L188) potentially used before declaration: [retval == IERC721Receiver.onERC721Received.selector](contracts/TalentLayerReview.sol#L174)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 173
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "96eee9b3cfc4f6c3009d8f05cdec8525ea21d8acf0398452afee40660d439428"
          }
        },
        {
          "ruleId": "2-0-variable-scope",
          "message": {
            "text": "Variable 'TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes).reason (contracts/TalentLayerReview.sol#175)' in TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes) (contracts/TalentLayerReview.sol#166-188) potentially used before declaration: reason.length == 0 (contracts/TalentLayerReview.sol#176)\n",
            "markdown": "Variable '[TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes).reason](contracts/TalentLayerReview.sol#L175)' in [TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes)](contracts/TalentLayerReview.sol#L166-L188) potentially used before declaration: [reason.length == 0](contracts/TalentLayerReview.sol#L176)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a7bab8e90add65220fca1cea662ee549812493925b5173ad5a4352844366b0e0"
          }
        },
        {
          "ruleId": "2-0-variable-scope",
          "message": {
            "text": "Variable 'ERC721A._checkContractOnERC721Received(address,address,uint256,bytes).reason (contracts/libs/ERC721A.sol#768)' in ERC721A._checkContractOnERC721Received(address,address,uint256,bytes) (contracts/libs/ERC721A.sol#758-777) potentially used before declaration: revert(uint256,uint256)(32 + reason,mload(uint256)(reason)) (contracts/libs/ERC721A.sol#773)\n",
            "markdown": "Variable '[ERC721A._checkContractOnERC721Received(address,address,uint256,bytes).reason](contracts/libs/ERC721A.sol#L768)' in [ERC721A._checkContractOnERC721Received(address,address,uint256,bytes)](contracts/libs/ERC721A.sol#L758-L777) potentially used before declaration: [revert(uint256,uint256)(32 + reason,mload(uint256)(reason))](contracts/libs/ERC721A.sol#L773)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 768,
                  "endLine": 768
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be5d7f22cbd8af04b9e1695903c5839aa97fbc2783d31b0ecb3b9c9c70b324d0"
          }
        },
        {
          "ruleId": "2-0-variable-scope",
          "message": {
            "text": "Variable 'ERC721A._checkContractOnERC721Received(address,address,uint256,bytes).reason (contracts/libs/ERC721A.sol#768)' in ERC721A._checkContractOnERC721Received(address,address,uint256,bytes) (contracts/libs/ERC721A.sol#758-777) potentially used before declaration: reason.length == 0 (contracts/libs/ERC721A.sol#769)\n",
            "markdown": "Variable '[ERC721A._checkContractOnERC721Received(address,address,uint256,bytes).reason](contracts/libs/ERC721A.sol#L768)' in [ERC721A._checkContractOnERC721Received(address,address,uint256,bytes)](contracts/libs/ERC721A.sol#L758-L777) potentially used before declaration: [reason.length == 0](contracts/libs/ERC721A.sol#L769)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 768,
                  "endLine": 768
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e51b93279f5efc1a8a23cdea078fcbd72555c4644b99e2db9b528a73d89e0277"
          }
        },
        {
          "ruleId": "2-0-variable-scope",
          "message": {
            "text": "Variable 'TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes).reason (contracts/TalentLayerReview.sol#175)' in TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes) (contracts/TalentLayerReview.sol#166-188) potentially used before declaration: revert(uint256,uint256)(32 + reason,mload(uint256)(reason)) (contracts/TalentLayerReview.sol#181)\n",
            "markdown": "Variable '[TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes).reason](contracts/TalentLayerReview.sol#L175)' in [TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes)](contracts/TalentLayerReview.sol#L166-L188) potentially used before declaration: [revert(uint256,uint256)(32 + reason,mload(uint256)(reason))](contracts/TalentLayerReview.sol#L181)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e64dc060c5e09133f5376d4f99cf1dbe15f4a14fa279a9deb75a0fe08983be77"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in TalentLayerID.mint(uint256,string) (contracts/TalentLayerID.sol#140-143):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerID.sol#141)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tState variables written after the call(s):\n\t- _afterMint(_handle,false,_platformId) (contracts/TalentLayerID.sol#142)\n\t\t- profile.platformId = _platformId (contracts/TalentLayerID.sol#259)\n\t\t- profile.handle = _handle (contracts/TalentLayerID.sol#260)\n",
            "markdown": "Reentrancy in [TalentLayerID.mint(uint256,string)](contracts/TalentLayerID.sol#L140-L143):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerID.sol#L141)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tState variables written after the call(s):\n\t- [_afterMint(_handle,false,_platformId)](contracts/TalentLayerID.sol#L142)\n\t\t- [profile.platformId = _platformId](contracts/TalentLayerID.sol#L259)\n\t\t- [profile.handle = _handle](contracts/TalentLayerID.sol#L260)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 143
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03c5ae085780798e82819ff907b6d9d693ee16b1c6c24acc19eb0ce801bbc332"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in TalentLayerPlatformID.mintForAddress(string,address) (contracts/TalentLayerPlatformID.sol#128-131):\n\tExternal calls:\n\t- _safeMint(_platformAddress,1) (contracts/TalentLayerPlatformID.sol#129)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tState variables written after the call(s):\n\t- _afterMint(_platformName) (contracts/TalentLayerPlatformID.sol#130)\n\t\t- platform.name = _platformName (contracts/TalentLayerPlatformID.sol#195)\n\t\t- platform.id = platformId (contracts/TalentLayerPlatformID.sol#196)\n",
            "markdown": "Reentrancy in [TalentLayerPlatformID.mintForAddress(string,address)](contracts/TalentLayerPlatformID.sol#L128-L131):\n\tExternal calls:\n\t- [_safeMint(_platformAddress,1)](contracts/TalentLayerPlatformID.sol#L129)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tState variables written after the call(s):\n\t- [_afterMint(_platformName)](contracts/TalentLayerPlatformID.sol#L130)\n\t\t- [platform.name = _platformName](contracts/TalentLayerPlatformID.sol#L195)\n\t\t- [platform.id = platformId](contracts/TalentLayerPlatformID.sol#L196)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 131
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "07e6e05bd4f896205ecf0358db668fdd02b4fad352cc8ba7f652ead84f3c5174"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in TalentLayerID.mintWithPoh(uint256,string) (contracts/TalentLayerID.sol#150-156):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerID.sol#152)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tState variables written after the call(s):\n\t- profiles[userTokenId].pohAddress = msg.sender (contracts/TalentLayerID.sol#154)\n\t- _afterMint(_handle,true,_platformId) (contracts/TalentLayerID.sol#155)\n\t\t- profile.platformId = _platformId (contracts/TalentLayerID.sol#259)\n\t\t- profile.handle = _handle (contracts/TalentLayerID.sol#260)\n",
            "markdown": "Reentrancy in [TalentLayerID.mintWithPoh(uint256,string)](contracts/TalentLayerID.sol#L150-L156):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerID.sol#L152)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tState variables written after the call(s):\n\t- [profiles[userTokenId].pohAddress = msg.sender](contracts/TalentLayerID.sol#L154)\n\t- [_afterMint(_handle,true,_platformId)](contracts/TalentLayerID.sol#L155)\n\t\t- [profile.platformId = _platformId](contracts/TalentLayerID.sol#L259)\n\t\t- [profile.handle = _handle](contracts/TalentLayerID.sol#L260)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "10133facc544d6d2957680f3b522993e7e6efe85f25458aca8057db64c633d61"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in TalentLayerPlatformID.mint(string) (contracts/TalentLayerPlatformID.sol#117-120):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerPlatformID.sol#118)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tState variables written after the call(s):\n\t- _afterMint(_platformName) (contracts/TalentLayerPlatformID.sol#119)\n\t\t- platform.name = _platformName (contracts/TalentLayerPlatformID.sol#195)\n\t\t- platform.id = platformId (contracts/TalentLayerPlatformID.sol#196)\n",
            "markdown": "Reentrancy in [TalentLayerPlatformID.mint(string)](contracts/TalentLayerPlatformID.sol#L117-L120):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerPlatformID.sol#L118)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tState variables written after the call(s):\n\t- [_afterMint(_platformName)](contracts/TalentLayerPlatformID.sol#L119)\n\t\t- [platform.name = _platformName](contracts/TalentLayerPlatformID.sol#L195)\n\t\t- [platform.id = platformId](contracts/TalentLayerPlatformID.sol#L196)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "418962b51058a0337ef5f645a15a7acd6298628babc617a0c1471de77ea4761e"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.createTokenTransaction(uint256,string,uint256,uint256) (contracts/TalentLayerEscrow.sol#319-352):\n\tExternal calls:\n\t- serviceRegistryContract.afterDeposit(_serviceId,_proposalId,transactionId) (contracts/TalentLayerEscrow.sol#348)\n\t- _deposit(sender,proposal.rateToken,transactionAmount) (contracts/TalentLayerEscrow.sol#349)\n\t\t- require(bool,string)(IERC20(_token).transferFrom(_sender,address(this),_amount),Transfer must not fail) (contracts/TalentLayerEscrow.sol#470)\n\tEvent emitted after the call(s):\n\t- ServiceProposalConfirmedWithDeposit(_serviceId,proposal.sellerId,transactionId) (contracts/TalentLayerEscrow.sol#351)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.createTokenTransaction(uint256,string,uint256,uint256)](contracts/TalentLayerEscrow.sol#L319-L352):\n\tExternal calls:\n\t- [serviceRegistryContract.afterDeposit(_serviceId,_proposalId,transactionId)](contracts/TalentLayerEscrow.sol#L348)\n\t- [_deposit(sender,proposal.rateToken,transactionAmount)](contracts/TalentLayerEscrow.sol#L349)\n\t\t- [require(bool,string)(IERC20(_token).transferFrom(_sender,address(this),_amount),Transfer must not fail)](contracts/TalentLayerEscrow.sol#L470)\n\tEvent emitted after the call(s):\n\t- [ServiceProposalConfirmedWithDeposit(_serviceId,proposal.sellerId,transactionId)](contracts/TalentLayerEscrow.sol#L351)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 319,
                  "endLine": 352
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e7e2ff56d3a06d1192fd09865a216f905537a76bff81afc11bbeeacf17d8c9e"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.reimburse(uint256,uint256) (contracts/TalentLayerEscrow.sol#381-394):\n\tExternal calls:\n\t- _reimburse(transaction,_amount) (contracts/TalentLayerEscrow.sol#389)\n\t\t- require(bool,string)(IERC20(_transaction.token).transfer(_transaction.sender,totalReleaseAmount),Transfer must not fail) (contracts/TalentLayerEscrow.sol#528-531)\n\t- _distributeMessage(transaction.serviceId,transaction.amount) (contracts/TalentLayerEscrow.sol#393)\n\t\t- serviceRegistryContract.afterFullPayment(_serviceId) (contracts/TalentLayerEscrow.sol#542)\n\tExternal calls sending eth:\n\t- _reimburse(transaction,_amount) (contracts/TalentLayerEscrow.sol#389)\n\t\t- address(_transaction.sender).transfer(totalReleaseAmount) (contracts/TalentLayerEscrow.sol#526)\n\tEvent emitted after the call(s):\n\t- PaymentCompleted(_serviceId) (contracts/TalentLayerEscrow.sol#543)\n\t\t- _distributeMessage(transaction.serviceId,transaction.amount) (contracts/TalentLayerEscrow.sol#393)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.reimburse(uint256,uint256)](contracts/TalentLayerEscrow.sol#L381-L394):\n\tExternal calls:\n\t- [_reimburse(transaction,_amount)](contracts/TalentLayerEscrow.sol#L389)\n\t\t- [require(bool,string)(IERC20(_transaction.token).transfer(_transaction.sender,totalReleaseAmount),Transfer must not fail)](contracts/TalentLayerEscrow.sol#L528-L531)\n\t- [_distributeMessage(transaction.serviceId,transaction.amount)](contracts/TalentLayerEscrow.sol#L393)\n\t\t- [serviceRegistryContract.afterFullPayment(_serviceId)](contracts/TalentLayerEscrow.sol#L542)\n\tExternal calls sending eth:\n\t- [_reimburse(transaction,_amount)](contracts/TalentLayerEscrow.sol#L389)\n\t\t- [address(_transaction.sender).transfer(totalReleaseAmount)](contracts/TalentLayerEscrow.sol#L526)\n\tEvent emitted after the call(s):\n\t- [PaymentCompleted(_serviceId)](contracts/TalentLayerEscrow.sol#L543)\n\t\t- [_distributeMessage(transaction.serviceId,transaction.amount)](contracts/TalentLayerEscrow.sol#L393)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 394
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ed01abb03be7ed126b1331cf3367417f3678b2b3e4b1a0b8bdb8828ab554b64"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.createETHTransaction(uint256,string,uint256,uint256) (contracts/TalentLayerEscrow.sol#274-310):\n\tExternal calls:\n\t- serviceRegistryContract.afterDeposit(_serviceId,_proposalId,transactionId) (contracts/TalentLayerEscrow.sol#307)\n\tEvent emitted after the call(s):\n\t- ServiceProposalConfirmedWithDeposit(_serviceId,proposal.sellerId,transactionId) (contracts/TalentLayerEscrow.sol#309)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.createETHTransaction(uint256,string,uint256,uint256)](contracts/TalentLayerEscrow.sol#L274-L310):\n\tExternal calls:\n\t- [serviceRegistryContract.afterDeposit(_serviceId,_proposalId,transactionId)](contracts/TalentLayerEscrow.sol#L307)\n\tEvent emitted after the call(s):\n\t- [ServiceProposalConfirmedWithDeposit(_serviceId,proposal.sellerId,transactionId)](contracts/TalentLayerEscrow.sol#L309)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 310
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f0135b4530328e7b4a868d94f72e0e35410a0da98af53ea73e812214b0598e2"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.claim(uint256,address) (contracts/TalentLayerEscrow.sol#402-418):\n\tExternal calls:\n\t- _transferBalance(recipient,_tokenAddress,amount) (contracts/TalentLayerEscrow.sol#415)\n\t\t- IERC20(_tokenAddress).transfer(_recipient,_amount) (contracts/TalentLayerEscrow.sol#604)\n\tExternal calls sending eth:\n\t- _transferBalance(recipient,_tokenAddress,amount) (contracts/TalentLayerEscrow.sol#415)\n\t\t- _recipient.transfer(_amount) (contracts/TalentLayerEscrow.sol#602)\n\tEvent emitted after the call(s):\n\t- FeesClaimed(_platformId,_tokenAddress,amount) (contracts/TalentLayerEscrow.sol#417)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.claim(uint256,address)](contracts/TalentLayerEscrow.sol#L402-L418):\n\tExternal calls:\n\t- [_transferBalance(recipient,_tokenAddress,amount)](contracts/TalentLayerEscrow.sol#L415)\n\t\t- [IERC20(_tokenAddress).transfer(_recipient,_amount)](contracts/TalentLayerEscrow.sol#L604)\n\tExternal calls sending eth:\n\t- [_transferBalance(recipient,_tokenAddress,amount)](contracts/TalentLayerEscrow.sol#L415)\n\t\t- [_recipient.transfer(_amount)](contracts/TalentLayerEscrow.sol#L602)\n\tEvent emitted after the call(s):\n\t- [FeesClaimed(_platformId,_tokenAddress,amount)](contracts/TalentLayerEscrow.sol#L417)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 418
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "19aa3abf1a5686a350bb9396c5a9b433336d080bba41b440fc36583caf8f0793"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.release(uint256,uint256) (contracts/TalentLayerEscrow.sol#360-373):\n\tExternal calls:\n\t- _release(transaction,_amount) (contracts/TalentLayerEscrow.sol#368)\n\t\t- require(bool,string)(IERC20(_transaction.token).transfer(_transaction.receiver,_releaseAmount),Transfer must not fail) (contracts/TalentLayerEscrow.sol#498-501)\n\t- _distributeMessage(transaction.serviceId,transaction.amount) (contracts/TalentLayerEscrow.sol#372)\n\t\t- serviceRegistryContract.afterFullPayment(_serviceId) (contracts/TalentLayerEscrow.sol#542)\n\tExternal calls sending eth:\n\t- _release(transaction,_amount) (contracts/TalentLayerEscrow.sol#368)\n\t\t- address(_transaction.receiver).transfer(_releaseAmount) (contracts/TalentLayerEscrow.sol#496)\n\tEvent emitted after the call(s):\n\t- PaymentCompleted(_serviceId) (contracts/TalentLayerEscrow.sol#543)\n\t\t- _distributeMessage(transaction.serviceId,transaction.amount) (contracts/TalentLayerEscrow.sol#372)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.release(uint256,uint256)](contracts/TalentLayerEscrow.sol#L360-L373):\n\tExternal calls:\n\t- [_release(transaction,_amount)](contracts/TalentLayerEscrow.sol#L368)\n\t\t- [require(bool,string)(IERC20(_transaction.token).transfer(_transaction.receiver,_releaseAmount),Transfer must not fail)](contracts/TalentLayerEscrow.sol#L498-L501)\n\t- [_distributeMessage(transaction.serviceId,transaction.amount)](contracts/TalentLayerEscrow.sol#L372)\n\t\t- [serviceRegistryContract.afterFullPayment(_serviceId)](contracts/TalentLayerEscrow.sol#L542)\n\tExternal calls sending eth:\n\t- [_release(transaction,_amount)](contracts/TalentLayerEscrow.sol#L368)\n\t\t- [address(_transaction.receiver).transfer(_releaseAmount)](contracts/TalentLayerEscrow.sol#L496)\n\tEvent emitted after the call(s):\n\t- [PaymentCompleted(_serviceId)](contracts/TalentLayerEscrow.sol#L543)\n\t\t- [_distributeMessage(transaction.serviceId,transaction.amount)](contracts/TalentLayerEscrow.sol#L372)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 360,
                  "endLine": 373
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "307194adbffeefe3ca0fa806a48a9c31968ef9fade2aa94a997cd34bc4e2b337"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.reimburse(uint256,uint256) (contracts/TalentLayerEscrow.sol#381-394):\n\tExternal calls:\n\t- _reimburse(transaction,_amount) (contracts/TalentLayerEscrow.sol#389)\n\t\t- require(bool,string)(IERC20(_transaction.token).transfer(_transaction.sender,totalReleaseAmount),Transfer must not fail) (contracts/TalentLayerEscrow.sol#528-531)\n\tExternal calls sending eth:\n\t- _reimburse(transaction,_amount) (contracts/TalentLayerEscrow.sol#389)\n\t\t- address(_transaction.sender).transfer(totalReleaseAmount) (contracts/TalentLayerEscrow.sol#526)\n\tEvent emitted after the call(s):\n\t- Payment(PaymentType.Reimburse,_amount,transaction.token,transaction.serviceId) (contracts/TalentLayerEscrow.sol#391)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.reimburse(uint256,uint256)](contracts/TalentLayerEscrow.sol#L381-L394):\n\tExternal calls:\n\t- [_reimburse(transaction,_amount)](contracts/TalentLayerEscrow.sol#L389)\n\t\t- [require(bool,string)(IERC20(_transaction.token).transfer(_transaction.sender,totalReleaseAmount),Transfer must not fail)](contracts/TalentLayerEscrow.sol#L528-L531)\n\tExternal calls sending eth:\n\t- [_reimburse(transaction,_amount)](contracts/TalentLayerEscrow.sol#L389)\n\t\t- [address(_transaction.sender).transfer(totalReleaseAmount)](contracts/TalentLayerEscrow.sol#L526)\n\tEvent emitted after the call(s):\n\t- [Payment(PaymentType.Reimburse,_amount,transaction.token,transaction.serviceId)](contracts/TalentLayerEscrow.sol#L391)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 394
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a26e1a207624393dd88bb8e167ff1c78ff9e81fb40d7c867e9adce59913c16f"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow._release(TalentLayerEscrow.Transaction,uint256) (contracts/TalentLayerEscrow.sol#479-511):\n\tExternal calls:\n\t- require(bool,string)(IERC20(_transaction.token).transfer(_transaction.receiver,_releaseAmount),Transfer must not fail) (contracts/TalentLayerEscrow.sol#498-501)\n\tExternal calls sending eth:\n\t- address(_transaction.receiver).transfer(_releaseAmount) (contracts/TalentLayerEscrow.sol#496)\n\tEvent emitted after the call(s):\n\t- OriginPlatformFeeReleased(originPlatformId,_transaction.serviceId,_transaction.token,originPlatformFeeAmount) (contracts/TalentLayerEscrow.sol#504-509)\n\t- PlatformFeeReleased(platformId,_transaction.serviceId,_transaction.token,platformFeeAmount) (contracts/TalentLayerEscrow.sol#510)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow._release(TalentLayerEscrow.Transaction,uint256)](contracts/TalentLayerEscrow.sol#L479-L511):\n\tExternal calls:\n\t- [require(bool,string)(IERC20(_transaction.token).transfer(_transaction.receiver,_releaseAmount),Transfer must not fail)](contracts/TalentLayerEscrow.sol#L498-L501)\n\tExternal calls sending eth:\n\t- [address(_transaction.receiver).transfer(_releaseAmount)](contracts/TalentLayerEscrow.sol#L496)\n\tEvent emitted after the call(s):\n\t- [OriginPlatformFeeReleased(originPlatformId,_transaction.serviceId,_transaction.token,originPlatformFeeAmount)](contracts/TalentLayerEscrow.sol#L504-L509)\n\t- [PlatformFeeReleased(platformId,_transaction.serviceId,_transaction.token,platformFeeAmount)](contracts/TalentLayerEscrow.sol#L510)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 479,
                  "endLine": 511
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3cee6d10ce234b76f2b93809cfce3460f54a94d5dd8da99c2c3ced885040bd08"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerPlatformID.mint(string) (contracts/TalentLayerPlatformID.sol#117-120):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerPlatformID.sol#118)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tEvent emitted after the call(s):\n\t- Mint(msg.sender,platformId,_platformName,mintFee) (contracts/TalentLayerPlatformID.sol#199)\n\t\t- _afterMint(_platformName) (contracts/TalentLayerPlatformID.sol#119)\n",
            "markdown": "Reentrancy in [TalentLayerPlatformID.mint(string)](contracts/TalentLayerPlatformID.sol#L117-L120):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerPlatformID.sol#L118)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tEvent emitted after the call(s):\n\t- [Mint(msg.sender,platformId,_platformName,mintFee)](contracts/TalentLayerPlatformID.sol#L199)\n\t\t- [_afterMint(_platformName)](contracts/TalentLayerPlatformID.sol#L119)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c20e2749a50456444295a0a1da484cabe7251a828131ceff80aab31ddbdbc5fb"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerID.mint(uint256,string) (contracts/TalentLayerID.sol#140-143):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerID.sol#141)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tEvent emitted after the call(s):\n\t- Mint(msg.sender,userTokenId,_handle,_poh,_platformId,mintFee) (contracts/TalentLayerID.sol#263)\n\t\t- _afterMint(_handle,false,_platformId) (contracts/TalentLayerID.sol#142)\n",
            "markdown": "Reentrancy in [TalentLayerID.mint(uint256,string)](contracts/TalentLayerID.sol#L140-L143):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerID.sol#L141)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tEvent emitted after the call(s):\n\t- [Mint(msg.sender,userTokenId,_handle,_poh,_platformId,mintFee)](contracts/TalentLayerID.sol#L263)\n\t\t- [_afterMint(_handle,false,_platformId)](contracts/TalentLayerID.sol#L142)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 143
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "de5934e4e6966b2973efa9b2d91b02e2c6fce8de9aa0534e47f3ff8a14c0b3d6"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerPlatformID.mintForAddress(string,address) (contracts/TalentLayerPlatformID.sol#128-131):\n\tExternal calls:\n\t- _safeMint(_platformAddress,1) (contracts/TalentLayerPlatformID.sol#129)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tEvent emitted after the call(s):\n\t- Mint(msg.sender,platformId,_platformName,mintFee) (contracts/TalentLayerPlatformID.sol#199)\n\t\t- _afterMint(_platformName) (contracts/TalentLayerPlatformID.sol#130)\n",
            "markdown": "Reentrancy in [TalentLayerPlatformID.mintForAddress(string,address)](contracts/TalentLayerPlatformID.sol#L128-L131):\n\tExternal calls:\n\t- [_safeMint(_platformAddress,1)](contracts/TalentLayerPlatformID.sol#L129)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tEvent emitted after the call(s):\n\t- [Mint(msg.sender,platformId,_platformName,mintFee)](contracts/TalentLayerPlatformID.sol#L199)\n\t\t- [_afterMint(_platformName)](contracts/TalentLayerPlatformID.sol#L130)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 131
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f0ab48227a46e4af6f1c0d17a76146d3285766ed82a6f4e1296200625af4f222"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerID.mintWithPoh(uint256,string) (contracts/TalentLayerID.sol#150-156):\n\tExternal calls:\n\t- _safeMint(msg.sender,1) (contracts/TalentLayerID.sol#152)\n\t\t- ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data) (contracts/libs/ERC721A.sol#764-776)\n\tEvent emitted after the call(s):\n\t- Mint(msg.sender,userTokenId,_handle,_poh,_platformId,mintFee) (contracts/TalentLayerID.sol#263)\n\t\t- _afterMint(_handle,true,_platformId) (contracts/TalentLayerID.sol#155)\n",
            "markdown": "Reentrancy in [TalentLayerID.mintWithPoh(uint256,string)](contracts/TalentLayerID.sol#L150-L156):\n\tExternal calls:\n\t- [_safeMint(msg.sender,1)](contracts/TalentLayerID.sol#L152)\n\t\t- [ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(),from,tokenId,_data)](contracts/libs/ERC721A.sol#L764-L776)\n\tEvent emitted after the call(s):\n\t- [Mint(msg.sender,userTokenId,_handle,_poh,_platformId,mintFee)](contracts/TalentLayerID.sol#L263)\n\t\t- [_afterMint(_handle,true,_platformId)](contracts/TalentLayerID.sol#L155)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f49ff74a89a43a6231a4720a6946b546a197d0c2f3dee6b00d9d2fce2f1fa0e5"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.release(uint256,uint256) (contracts/TalentLayerEscrow.sol#360-373):\n\tExternal calls:\n\t- _release(transaction,_amount) (contracts/TalentLayerEscrow.sol#368)\n\t\t- require(bool,string)(IERC20(_transaction.token).transfer(_transaction.receiver,_releaseAmount),Transfer must not fail) (contracts/TalentLayerEscrow.sol#498-501)\n\tExternal calls sending eth:\n\t- _release(transaction,_amount) (contracts/TalentLayerEscrow.sol#368)\n\t\t- address(_transaction.receiver).transfer(_releaseAmount) (contracts/TalentLayerEscrow.sol#496)\n\tEvent emitted after the call(s):\n\t- Payment(PaymentType.Release,_amount,transaction.token,transaction.serviceId) (contracts/TalentLayerEscrow.sol#370)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.release(uint256,uint256)](contracts/TalentLayerEscrow.sol#L360-L373):\n\tExternal calls:\n\t- [_release(transaction,_amount)](contracts/TalentLayerEscrow.sol#L368)\n\t\t- [require(bool,string)(IERC20(_transaction.token).transfer(_transaction.receiver,_releaseAmount),Transfer must not fail)](contracts/TalentLayerEscrow.sol#L498-L501)\n\tExternal calls sending eth:\n\t- [_release(transaction,_amount)](contracts/TalentLayerEscrow.sol#L368)\n\t\t- [address(_transaction.receiver).transfer(_releaseAmount)](contracts/TalentLayerEscrow.sol#L496)\n\tEvent emitted after the call(s):\n\t- [Payment(PaymentType.Release,_amount,transaction.token,transaction.serviceId)](contracts/TalentLayerEscrow.sol#L370)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 360,
                  "endLine": 373
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6f7d0d2bf940e32b86f39becc0eb8a0ba543e86ee0e4a70450c389ac9833820"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow._distributeMessage(uint256,uint256) (contracts/TalentLayerEscrow.sol#540-545):\n\tExternal calls:\n\t- serviceRegistryContract.afterFullPayment(_serviceId) (contracts/TalentLayerEscrow.sol#542)\n\tEvent emitted after the call(s):\n\t- PaymentCompleted(_serviceId) (contracts/TalentLayerEscrow.sol#543)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow._distributeMessage(uint256,uint256)](contracts/TalentLayerEscrow.sol#L540-L545):\n\tExternal calls:\n\t- [serviceRegistryContract.afterFullPayment(_serviceId)](contracts/TalentLayerEscrow.sol#L542)\n\tEvent emitted after the call(s):\n\t- [PaymentCompleted(_serviceId)](contracts/TalentLayerEscrow.sol#L543)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 540,
                  "endLine": 545
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fffa171ec1194cee5cb62c822adcdbb6b3fbdba57ec7e83279e1632b4b41aaaf"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "MockProofOfHumanity.isRegistered(address) (contracts/Mocks/MockProofOfHumanity.sol#35-38) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- submission.registered && block.timestamp - submission.submissionTime <= submissionDuration (contracts/Mocks/MockProofOfHumanity.sol#37)\n",
            "markdown": "[MockProofOfHumanity.isRegistered(address)](contracts/Mocks/MockProofOfHumanity.sol#L35-L38) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [submission.registered && block.timestamp - submission.submissionTime <= submissionDuration](contracts/Mocks/MockProofOfHumanity.sol#L37)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Mocks/MockProofOfHumanity.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "24a0027bdbb9ae27f0eb72f7fdda300290d650a88533c2b010e265ed12a80c8a"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Base64.encode(bytes) (node_modules/@openzeppelin/contracts/utils/Base64.sol#20-91) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Base64.sol#39-88)\n",
            "markdown": "[Base64.encode(bytes)](node_modules/@openzeppelin/contracts/utils/Base64.sol#L20-L91) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Base64.sol#L39-L88)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Base64.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c4184ecf5a8d555f4e77d71a19a17b59a2682d4385cec8979edc41409e26d48"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._nextInitializedFlag(uint256) (contracts/libs/ERC721A.sol#399-405) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#401-404)\n",
            "markdown": "[ERC721A._nextInitializedFlag(uint256)](contracts/libs/ERC721A.sol#L399-L405) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L401-L404)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 399,
                  "endLine": 405
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0fb218cfa2be4502b706d9b0b7502dd85fbb1264a29b6eb02e9133c6baa8360f"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._checkContractOnERC721Received(address,address,uint256,bytes) (contracts/libs/ERC721A.sol#758-777) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#772-774)\n",
            "markdown": "[ERC721A._checkContractOnERC721Received(address,address,uint256,bytes)](contracts/libs/ERC721A.sol#L758-L777) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L772-L774)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 758,
                  "endLine": 777
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0fdbb391072669dfda75ca80460545885d663af5472a47ebcf0107c6ff8b6a63"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "MerkleProof._efficientHash(bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#204-211) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#206-210)\n",
            "markdown": "[MerkleProof._efficientHash(bytes32,bytes32)](node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#L204-L211) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#L206-L210)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "17d778eca79cd1ef78095b2b5a34e9421d06f9eaaaf69b09dc6d9d0320d32146"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A.transferFrom(address,address,uint256) (contracts/libs/ERC721A.sol#600-661) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#620-625)\n",
            "markdown": "[ERC721A.transferFrom(address,address,uint256)](contracts/libs/ERC721A.sol#L600-L661) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L620-L625)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 600,
                  "endLine": 661
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "24d95c2d4e0e8687e1e757846a8f4ad63a3922d535bbbb59158e831d01d57a68"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#201-221) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#213-216)\n",
            "markdown": "[Address.verifyCallResult(bool,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L201-L221) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Address.sol#L213-L216)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 221
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "35871747c525efe5aeed3ee6e6ac7d19de1404d80cba7ebe954161c30eced4d8"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._burn(uint256,bool) (contracts/libs/ERC721A.sol#971-1037) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#987-992)\n",
            "markdown": "[ERC721A._burn(uint256,bool)](contracts/libs/ERC721A.sol#L971-L1037) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L987-L992)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 971,
                  "endLine": 1037
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "370304852ce76b97d365bd15a27426fe388ae8824305b5ba3bdaee4163537402"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._isSenderApprovedOrOwner(address,address,address) (contracts/libs/ERC721A.sol#494-507) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#499-506)\n",
            "markdown": "[ERC721A._isSenderApprovedOrOwner(address,address,address)](contracts/libs/ERC721A.sol#L494-L507) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L499-L506)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 494,
                  "endLine": 507
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "679ea7bfa99d09d8acf80bdcdae848b8e19e41a4736c8aac53dcb1693eae27d6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._setAux(address,uint64) (contracts/libs/ERC721A.sol#233-242) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#237-239)\n",
            "markdown": "[ERC721A._setAux(address,uint64)](contracts/libs/ERC721A.sol#L233-L242) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L237-L239)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 233,
                  "endLine": 242
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a189b74c8ea8007c4ab2ee8be02bf051466eef390d7e27c92a7eea83b2147da7"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes) (contracts/TalentLayerReview.sol#166-188) uses assembly\n\t- INLINE ASM (contracts/TalentLayerReview.sol#180-182)\n",
            "markdown": "[TalentLayerReview._checkOnERC721Received(address,address,uint256,bytes)](contracts/TalentLayerReview.sol#L166-L188) uses assembly\n\t- [INLINE ASM](contracts/TalentLayerReview.sol#L180-L182)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 188
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a1979f1f53773926f81b313723c28465c6a1ac9bbffad2cc38da96b3d2d95bde"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._toString(uint256) (contracts/libs/ERC721A.sol#1107-1148) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#1108-1147)\n",
            "markdown": "[ERC721A._toString(uint256)](contracts/libs/ERC721A.sol#L1107-L1148) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L1108-L1147)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 1107,
                  "endLine": 1148
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b241dde2c60c6b0f7f2e29845ad23125d7f222d949e2bf9da77ca228beed52d3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._setExtraDataAt(uint256,uint24) (contracts/libs/ERC721A.sol#1046-1056) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#1051-1053)\n",
            "markdown": "[ERC721A._setExtraDataAt(uint256,uint24)](contracts/libs/ERC721A.sol#L1046-L1056) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L1051-L1053)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 1046,
                  "endLine": 1056
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b967fc0d5700f44f85a23b647ca3db9d385624f3c7a80f0fe885c67a33860a69"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._mint(address,uint256) (contracts/libs/ERC721A.sol#793-851) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#824-845)\n",
            "markdown": "[ERC721A._mint(address,uint256)](contracts/libs/ERC721A.sol#L793-L851) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L824-L845)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 793,
                  "endLine": 851
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4c49c1d2c944dcf4f53b13699919b4f6335ce16c91245b7e6bdd02f444f195a"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._packOwnershipData(address,uint256) (contracts/libs/ERC721A.sol#387-394) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#388-393)\n",
            "markdown": "[ERC721A._packOwnershipData(address,uint256)](contracts/libs/ERC721A.sol#L387-L394) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L388-L393)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 387,
                  "endLine": 394
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e2e13ce685bc08f29de5752339087020299087a6c77443cb11435f7fed5311b2"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721A._getApprovedSlotAndAddress(uint256) (contracts/libs/ERC721A.sol#512-523) uses assembly\n\t- INLINE ASM (contracts/libs/ERC721A.sol#519-522)\n",
            "markdown": "[ERC721A._getApprovedSlotAndAddress(uint256)](contracts/libs/ERC721A.sol#L512-L523) uses assembly\n\t- [INLINE ASM](contracts/libs/ERC721A.sol#L519-L522)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 512,
                  "endLine": 523
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f05f50f5f0fa02b731418c37ff62c6a09a3c21cae56b94c439dbd8f02407db09"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "Different versions of Solidity are used:\n\t- Version used: ['^0.8.0', '^0.8.1', '^0.8.4', '^0.8.9']\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)\n\t- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Base64.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)\n\t- ^0.8.9 (contracts/Arbitrable.sol#2)\n\t- ^0.8.9 (contracts/Arbitrator.sol#2)\n\t- ^0.8.9 (contracts/IArbitrable.sol#2)\n\t- ^0.8.9 (contracts/ITalentLayerEscrow.sol#2)\n\t- ^0.8.9 (contracts/Mocks/MockProofOfHumanity.sol#2)\n\t- ^0.8.9 (contracts/ServiceRegistry.sol#2)\n\t- ^0.8.9 (contracts/TalentLayerArbitrator.sol#2)\n\t- ^0.8.9 (contracts/TalentLayerEscrow.sol#2)\n\t- ^0.8.9 (contracts/TalentLayerID.sol#2)\n\t- ^0.8.9 (contracts/TalentLayerPlatformID.sol#2)\n\t- ^0.8.9 (contracts/TalentLayerReview.sol#4)\n\t- ^0.8.9 (contracts/interfaces/IProofOfHumanity.sol#2)\n\t- ^0.8.9 (contracts/interfaces/IServiceRegistry.sol#2)\n\t- ^0.8.9 (contracts/interfaces/ITalentLayerID.sol#2)\n\t- ^0.8.9 (contracts/interfaces/ITalentLayerPlatformID.sol#2)\n\t- ^0.8.4 (contracts/libs/ERC721A.sol#5)\n\t- ^0.8.4 (contracts/libs/IERC721A.sol#5)\n\t- ^0.8.9 (contracts/tests/SimpleERC20.sol#2)\n",
            "markdown": "Different versions of Solidity are used:\n\t- Version used: ['^0.8.0', '^0.8.1', '^0.8.4', '^0.8.9']\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/access/Ownable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#L4)\n\t- [^0.8.1](node_modules/@openzeppelin/contracts/utils/Address.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Base64.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Strings.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4)\n\t- [^0.8.9](contracts/Arbitrable.sol#L2)\n\t- [^0.8.9](contracts/Arbitrator.sol#L2)\n\t- [^0.8.9](contracts/IArbitrable.sol#L2)\n\t- [^0.8.9](contracts/ITalentLayerEscrow.sol#L2)\n\t- [^0.8.9](contracts/Mocks/MockProofOfHumanity.sol#L2)\n\t- [^0.8.9](contracts/ServiceRegistry.sol#L2)\n\t- [^0.8.9](contracts/TalentLayerArbitrator.sol#L2)\n\t- [^0.8.9](contracts/TalentLayerEscrow.sol#L2)\n\t- [^0.8.9](contracts/TalentLayerID.sol#L2)\n\t- [^0.8.9](contracts/TalentLayerPlatformID.sol#L2)\n\t- [^0.8.9](contracts/TalentLayerReview.sol#L4)\n\t- [^0.8.9](contracts/interfaces/IProofOfHumanity.sol#L2)\n\t- [^0.8.9](contracts/interfaces/IServiceRegistry.sol#L2)\n\t- [^0.8.9](contracts/interfaces/ITalentLayerID.sol#L2)\n\t- [^0.8.9](contracts/interfaces/ITalentLayerPlatformID.sol#L2)\n\t- [^0.8.4](contracts/libs/ERC721A.sol#L5)\n\t- [^0.8.4](contracts/libs/IERC721A.sol#L5)\n\t- [^0.8.9](contracts/tests/SimpleERC20.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "862931379597a9804d3f6c42814b8e529510922cf65fabbb5fdffdaafa42cf17"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._isSenderApprovedOrOwner(address,address,address) (contracts/libs/ERC721A.sol#494-507) is never used and should be removed\n",
            "markdown": "[ERC721A._isSenderApprovedOrOwner(address,address,address)](contracts/libs/ERC721A.sol#L494-L507) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 494,
                  "endLine": 507
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "01f7e5139a9ef02d04998bfc06aa366086a5dfec049d325465968e4297c143d9"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._getAux(address) (contracts/libs/ERC721A.sol#225-227) is never used and should be removed\n",
            "markdown": "[ERC721A._getAux(address)](contracts/libs/ERC721A.sol#L225-L227) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 227
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0449037e2b9db86e4eff524e56dc22349e7432734737fa27551651eaa3de990c"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._burn(uint256,bool) (contracts/libs/ERC721A.sol#971-1037) is never used and should be removed\n",
            "markdown": "[ERC721A._burn(uint256,bool)](contracts/libs/ERC721A.sol#L971-L1037) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 971,
                  "endLine": 1037
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15ba51ff89a132b177de4c8abb7182b464983692fd96b9decb90e5ac349ba6e4"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._burn(uint256) (contracts/libs/ERC721A.sol#957-959) is never used and should be removed\n",
            "markdown": "[ERC721A._burn(uint256)](contracts/libs/ERC721A.sol#L957-L959) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 957,
                  "endLine": 959
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "184c97395045405bab4b9684f3b4399af16033d441a7fbb8ee57940e580eb706"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._getApprovedSlotAndAddress(uint256) (contracts/libs/ERC721A.sol#512-523) is never used and should be removed\n",
            "markdown": "[ERC721A._getApprovedSlotAndAddress(uint256)](contracts/libs/ERC721A.sol#L512-L523) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 512,
                  "endLine": 523
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "356c03e6270d7b34cbbc719d1bbaf6f00a3566cdef3c935f13404d8befc6a047"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._ownershipAt(uint256) (contracts/libs/ERC721A.sol#330-332) is never used and should be removed\n",
            "markdown": "[ERC721A._ownershipAt(uint256)](contracts/libs/ERC721A.sol#L330-L332) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 330,
                  "endLine": 332
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5311f51213e9c3a40599b184ddbd56f3e5c387e41ca4f84a88480d33c2401ec0"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._numberBurned(address) (contracts/libs/ERC721A.sol#218-220) is never used and should be removed\n",
            "markdown": "[ERC721A._numberBurned(address)](contracts/libs/ERC721A.sol#L218-L220) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 220
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c05cc37eee9f9ca7bbc40f12d6e7ed2845e9f40c98c186c493172bc5827e45b"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._mintERC2309(address,uint256) (contracts/libs/ERC721A.sol#874-906) is never used and should be removed\n",
            "markdown": "[ERC721A._mintERC2309(address,uint256)](contracts/libs/ERC721A.sol#L874-L906) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 874,
                  "endLine": 906
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6dfa6363c166462e15b7d352dac0fe9296b5634350f374376a360f3f7e9edad6"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._totalMinted() (contracts/libs/ERC721A.sol#181-187) is never used and should be removed\n",
            "markdown": "[ERC721A._totalMinted()](contracts/libs/ERC721A.sol#L181-L187) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 187
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90a38499aec871c848d4a3a7479aa5d90e8522e1b1d300fef2e03dbc439c6551"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._setExtraDataAt(uint256,uint24) (contracts/libs/ERC721A.sol#1046-1056) is never used and should be removed\n",
            "markdown": "[ERC721A._setExtraDataAt(uint256,uint24)](contracts/libs/ERC721A.sol#L1046-L1056) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 1046,
                  "endLine": 1056
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9dd50ecb80c2bb802503e047404ac861697792c6037bcc49463cba0951b6180c"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._totalBurned() (contracts/libs/ERC721A.sol#192-194) is never used and should be removed\n",
            "markdown": "[ERC721A._totalBurned()](contracts/libs/ERC721A.sol#L192-L194) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 192,
                  "endLine": 194
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a87d4035832f72a2ef582381f49857d7982f3f83e6e13edd6abe5c4545342059"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._numberMinted(address) (contracts/libs/ERC721A.sol#211-213) is never used and should be removed\n",
            "markdown": "[ERC721A._numberMinted(address)](contracts/libs/ERC721A.sol#L211-L213) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 213
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5320606284ba22da419d9bf85a0d9b64c35f829d4e1b0dc5fd3baaa5fdaf710"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "TalentLayerReview._beforeTokenTransfer(address,address,uint256) (contracts/TalentLayerReview.sol#300) is never used and should be removed\n",
            "markdown": "[TalentLayerReview._beforeTokenTransfer(address,address,uint256)](contracts/TalentLayerReview.sol#L300) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 300,
                  "endLine": 300
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbd929ceaa00a1f54afa682cb00bcbc23874aa68565bae77f88d1f44e2fc3172"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._setAux(address,uint64) (contracts/libs/ERC721A.sol#233-242) is never used and should be removed\n",
            "markdown": "[ERC721A._setAux(address,uint64)](contracts/libs/ERC721A.sol#L233-L242) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 233,
                  "endLine": 242
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d8ffcae15feac3020d36f2d2bcfd8ac4c7ee4a92724dc78743293b0b647aca1c"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "TalentLayerReview._burn(uint256) (contracts/TalentLayerReview.sol#265) is never used and should be removed\n",
            "markdown": "[TalentLayerReview._burn(uint256)](contracts/TalentLayerReview.sol#L265) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 265,
                  "endLine": 265
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "de83aaf665591fbb5cd64ee9b4c1ff7607620d25466c89f8b4ad8253a63f2c23"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "TalentLayerReview._afterTokenTransfer(address,address,uint256) (contracts/TalentLayerReview.sol#305) is never used and should be removed\n",
            "markdown": "[TalentLayerReview._afterTokenTransfer(address,address,uint256)](contracts/TalentLayerReview.sol#L305) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 305,
                  "endLine": 305
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dea8eb100ea9d1a4b417d2ca03a553d512ca55eb2348f594178080e6768d590d"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._toString(uint256) (contracts/libs/ERC721A.sol#1107-1148) is never used and should be removed\n",
            "markdown": "[ERC721A._toString(uint256)](contracts/libs/ERC721A.sol#L1107-L1148) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 1107,
                  "endLine": 1148
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e40527978ee71bca8939225046f4457b60d49a6be5ffc78b17ffa3c2acd8507a"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._baseURI() (contracts/libs/ERC721A.sol#300-302) is never used and should be removed\n",
            "markdown": "[ERC721A._baseURI()](contracts/libs/ERC721A.sol#L300-L302) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 300,
                  "endLine": 302
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea398317256be7f5c9ba61997097aa3a945d1929804b7f87260ad864d3f3cbcc"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC721A._initializeOwnershipAt(uint256) (contracts/libs/ERC721A.sol#337-341) is never used and should be removed\n",
            "markdown": "[ERC721A._initializeOwnershipAt(uint256)](contracts/libs/ERC721A.sol#L337-L341) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 337,
                  "endLine": 341
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ed2b426cc685055d6b2d6399e42b9218633b19d1de7d2096fa264f36aac78cdb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ac7c62454421eba41ad4bc7f77cc11d95ff2e283def53e5f32dd991137af888"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Context.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21c670e40e414a2f849413afbbdb25adb81dae6585c4f38fc83730c17377e60f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/interfaces/IServiceRegistry.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/interfaces/IServiceRegistry.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IServiceRegistry.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2804a8c9dbf3ce85e0b3f85359a918ce680b0cbd7c4f0f20a77a64d2189a747b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/TalentLayerID.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/TalentLayerID.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "338db89c89d859c15f1ac065c3d35cc083acd2563c0023ea37a47e4205293a5d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Base64.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Base64.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Base64.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "35aa0b38071bc1002dc17590ef1a95dd50fac9660d41591752049a22ede13420"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Strings.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "39bb6de244e9d295e9aa6c566b0b6e8f01ba481f4efc9e16952394697f339857"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/IArbitrable.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/IArbitrable.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IArbitrable.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a8d14822cbeec827adc5457cca29f14fb21ffe6c383716e61fb1eb84755f252"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.4 (contracts/libs/ERC721A.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.8.4](contracts/libs/ERC721A.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3c9edc95ffaeef4f46ce385ebff3e2ae02fbcf97890194bfc340cb0200d384a2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/TalentLayerReview.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/TalentLayerReview.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e560e0a402f24f5e17fcd03ff80c569ae1d76049c8d513b2a6eaaadb76ef229"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ee23e770ee684d5a13b252ee9d844b059d544466d1ebf2530076d2f0a1db1ae"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/Arbitrable.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/Arbitrable.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Arbitrable.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "50c62b161ee533050700c2606c7a9ed57778b8fbe6956800f925de8d91718fe7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5106c52e320f91bc8dcdccc56e1a9bb1d7b604d42f94e56abd6d7c61d14525ee"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.1](node_modules/@openzeppelin/contracts/utils/Address.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5906f1667ddb1546c744db1c5ec0714512ac2139194ac59714f6577a5008fe49"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/interfaces/ITalentLayerID.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/interfaces/ITalentLayerID.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ITalentLayerID.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5c5af28648d605c773e8a268fd2cdbf47640b7255a659d0bb44f0070e563f9ff"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/ServiceRegistry.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/ServiceRegistry.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "659d4d3773599ff0739689e7fee8866482e7d0f14ce291214a72cbd67dc8821e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/TalentLayerEscrow.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/TalentLayerEscrow.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "74f2180b6b1118fa47feead1b21e0e836ecadc0757b8f8a52a2daae3935e69d3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7c6257fc3179e015e3f50299b475376ddc0974a3a8d2751bd7480388339a3a73"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/Mocks/MockProofOfHumanity.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/Mocks/MockProofOfHumanity.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Mocks/MockProofOfHumanity.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "823df4e2e170131b54843a7e036705a572b4a2deb01cde1814647dcc1b45d6d5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/tests/SimpleERC20.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/tests/SimpleERC20.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tests/SimpleERC20.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "82c37cdd2f50855584a014a601814a79ea7ed3bd2c47a625b98136b3571513f4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "851a3cc70cf5a0e84cea60ba82f675bc668a61dfc08f0b82199206a5fbafb3b4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/IAccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ce357b365daa9097b769520ac4e96f02c47c078f00899140bf6e5452f877f79"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f9f9f2cad55d4015ab16bf18ee4473e161f6ce9be9f964e173b1c3ef11a1c5c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9aa52b2df4a9eaed2367df9ba879f35420395b80d0a76764766ed12bb8d78d84"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9d8a804f21d9bda1c90bbe4177baae5a4bfe61bc990c3ffec1a5cb063264dce7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b151eaea977ae1335b86997d4b8787b01ee7e82e48e1718232df668da82529e4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/interfaces/ITalentLayerPlatformID.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/interfaces/ITalentLayerPlatformID.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ITalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b152dcd681a78dd35bc4f9d1cb265d824416e19eafb8d8e3e552651b636433f9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.4 (contracts/libs/IERC721A.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.8.4](contracts/libs/IERC721A.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/IERC721A.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b6537b5d71e1fce8fa32d01c1b5b53eec66271f0e51b621fc34898f6c5395187"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/Arbitrator.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/Arbitrator.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Arbitrator.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b8d5f8fa9aa55f5270d98d201b1a1f52cc9f13c370bb5734d4eba43a76f68a7b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/interfaces/IProofOfHumanity.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/interfaces/IProofOfHumanity.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IProofOfHumanity.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bebda383e4a9e5d862d403c517b54d1a8808cf73f3679183f62257e49b18b6f9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/ITalentLayerEscrow.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/ITalentLayerEscrow.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ITalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cefd8ba8c369ddf30040fc234adf6a6224faed60d6dfed557c6461a4fe51aca8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/TalentLayerArbitrator.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/TalentLayerArbitrator.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cf154a1882515466e7ffb24a3d232930f45e980848e1ed6d5d61f17cdaf867ad"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/access/Ownable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/Ownable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d9fcf15f6c48db746fe8b4b5b79cadf5dc4cde499aed490b6b22d0f93b6cdddd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e50a4771b0aca0892aba1b2286dd748b1627baee6c6a691176bc873aa48c94f1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.9 (contracts/TalentLayerPlatformID.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.9](contracts/TalentLayerPlatformID.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fab9042237d83899e44b88e755a000a3fc8034cc0c991c82b3718685c8fd66a7"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in TalentLayerID.withdraw() (contracts/TalentLayerID.sol#244-247):\n\t- (sent) = address(msg.sender).call{value: address(this).balance}() (contracts/TalentLayerID.sol#245)\n",
            "markdown": "Low level call in [TalentLayerID.withdraw()](contracts/TalentLayerID.sol#L244-L247):\n\t- [(sent) = address(msg.sender).call{value: address(this).balance}()](contracts/TalentLayerID.sol#L245)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 247
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3ee92cb8c8c8d1b46d7fa9f7571afeb737ce0588b6ced0f82149db77387fd77b"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):\n\t- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)\n",
            "markdown": "Low level call in [Address.sendValue(address,uint256)](node_modules/@openzeppelin/contracts/utils/Address.sol#L60-L65):\n\t- [(success) = recipient.call{value: amount}()](node_modules/@openzeppelin/contracts/utils/Address.sol#L63)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a45709b07c12b3e52a59e9b801f6f63b73382e5cec54b85cd8172ce2bc9d44b3"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-139):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n",
            "markdown": "Low level call in [Address.functionCallWithValue(address,bytes,uint256,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L128-L139):\n\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 139
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b673e3527018708f76871ed62a1879b9035819e49d368aba92f27343cf591ab2"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#164)\n",
            "markdown": "Low level call in [Address.functionStaticCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L157-L166):\n\t- [(success,returndata) = target.staticcall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L164)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 166
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c706e8e01049568550afd32aaf56e3f04f269e818d404e36dde611996851ece7"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193):\n\t- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#191)\n",
            "markdown": "Low level call in [Address.functionDelegateCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L184-L193):\n\t- [(success,returndata) = target.delegatecall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L191)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c944733a5fa81935f97104b39ea4f867f663e8d05b23c0ea00802aa0c991e46c"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in TalentLayerPlatformID.withdraw() (contracts/TalentLayerPlatformID.sol#181-184):\n\t- (sent) = address(msg.sender).call{value: address(this).balance}() (contracts/TalentLayerPlatformID.sol#182)\n",
            "markdown": "Low level call in [TalentLayerPlatformID.withdraw()](contracts/TalentLayerPlatformID.sol#L181-L184):\n\t- [(sent) = address(msg.sender).call{value: address(this).balance}()](contracts/TalentLayerPlatformID.sol#L182)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 184
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef40816394ce098b289aeac230b68661a86d976716e7f29ef332738bd3939654"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockProofOfHumanity (contracts/Mocks/MockProofOfHumanity.sol#6-39) should inherit from IProofOfHumanity (contracts/interfaces/IProofOfHumanity.sol#4-6)\n",
            "markdown": "[MockProofOfHumanity](contracts/Mocks/MockProofOfHumanity.sol#L6-L39) should inherit from [IProofOfHumanity](contracts/interfaces/IProofOfHumanity.sol#L4-L6)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Mocks/MockProofOfHumanity.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1ed2ffccd1f38cc8889cc5b74e65ad6c4f9452c44f86581457cfab97047a5a59"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "TalentLayerPlatformID (contracts/TalentLayerPlatformID.sol#13-315) should inherit from ITalentLayerPlatformID (contracts/interfaces/ITalentLayerPlatformID.sol#10-28)\n",
            "markdown": "[TalentLayerPlatformID](contracts/TalentLayerPlatformID.sol#L13-L315) should inherit from [ITalentLayerPlatformID](contracts/interfaces/ITalentLayerPlatformID.sol#L10-L28)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 315
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5183ffa8073a5cfa18a2dd296a0f28eafb075733de2d6afe509018585c2e7d09"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "ServiceRegistry (contracts/ServiceRegistry.sol#12-384) should inherit from IServiceRegistry (contracts/interfaces/IServiceRegistry.sol#4-49)\n",
            "markdown": "[ServiceRegistry](contracts/ServiceRegistry.sol#L12-L384) should inherit from [IServiceRegistry](contracts/interfaces/IServiceRegistry.sol#L4-L49)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "94ea1f89173e3938507af67930a799eeeb51b26e9d0c20ceea9ab37d2e44833e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.createProposal(uint256,address,uint256,string)._proposalDataUri (contracts/ServiceRegistry.sol#197) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.createProposal(uint256,address,uint256,string)._proposalDataUri](contracts/ServiceRegistry.sol#L197) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "01b5baff9913081224e94f83149b39a50ca67091a13a907d1fd1c9358a067ec1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.updateRecoveryRoot(bytes32)._newRoot (contracts/TalentLayerID.sol#228) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.updateRecoveryRoot(bytes32)._newRoot](contracts/TalentLayerID.sol#L228) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 228,
                  "endLine": 228
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03174bf7c97e0ddc176f347169feb0990eeec853558332be936ca214103ecffc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Arbitrable.rule(uint256,uint256)._disputeID (contracts/Arbitrable.sol#38) is not in mixedCase\n",
            "markdown": "Parameter [Arbitrable.rule(uint256,uint256)._disputeID](contracts/Arbitrable.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Arbitrable.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "093a67420cba362d0f8d4d23be06495c247ed0fa7cbc25fff3fdebacf4b0f6f8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._merkleProof (contracts/TalentLayerID.sol#199) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._merkleProof](contracts/TalentLayerID.sol#L199) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ad39a7502f630238fe89d7beb6a0eb0f5f4bddcba3599a538af9e7ff5da2464"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.reimburse(uint256,uint256)._transactionId (contracts/TalentLayerEscrow.sol#381) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.reimburse(uint256,uint256)._transactionId](contracts/TalentLayerEscrow.sol#L381) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 381
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c5c4565298bd8376f29613ec15406fd485ccc27250bae082f313d998ed0c0a1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.isValid(uint256)._platformId (contracts/TalentLayerPlatformID.sol#217) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.isValid(uint256)._platformId](contracts/TalentLayerPlatformID.sol#L217) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 217
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ed6e33eea2b55d306b5e71a1c83be0fd581ebe670cbc9b6c2974be9dfcf7c92"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ERC721A.safeTransferFrom(address,address,uint256,bytes)._data (contracts/libs/ERC721A.sol#693) is not in mixedCase\n",
            "markdown": "Parameter [ERC721A.safeTransferFrom(address,address,uint256,bytes)._data](contracts/libs/ERC721A.sol#L693) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 693,
                  "endLine": 693
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f4e09e402a3913feb2fad9f671583ac74f5d7a0b43d8c66f22c9dc9c3539c5f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.updateProfileData(uint256,string)._newCid (contracts/TalentLayerPlatformID.sol#139) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.updateProfileData(uint256,string)._newCid](contracts/TalentLayerPlatformID.sol#L139) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "16074fbd10bf12e2f49d12a5dcb943eb71618236fedca1689a66d0c09d26e436"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerArbitrator.createDispute(uint256,bytes)._choices (contracts/TalentLayerArbitrator.sol#66) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerArbitrator.createDispute(uint256,bytes)._choices](contracts/TalentLayerArbitrator.sol#L66) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1663d5d551ab1856afe51c0125dfbdc3e174d964f998519e8dfe037e33b0af08"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Arbitrable.rule(uint256,uint256)._ruling (contracts/Arbitrable.sol#38) is not in mixedCase\n",
            "markdown": "Parameter [Arbitrable.rule(uint256,uint256)._ruling](contracts/Arbitrable.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Arbitrable.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1843cdafae6ce035b068d85a6b3b177228ad0f63534a053d2b05ee24ee3f1cca"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.release(uint256,uint256)._amount (contracts/TalentLayerEscrow.sol#360) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.release(uint256,uint256)._amount](contracts/TalentLayerEscrow.sol#L360) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 360,
                  "endLine": 360
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1cd7ebc35fbbfdb8daf796c74baa3287fdc68bd56293c1c3135cc537660b92ee"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.createProposal(uint256,address,uint256,string)._rateAmount (contracts/ServiceRegistry.sol#196) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.createProposal(uint256,address,uint256,string)._rateAmount](contracts/ServiceRegistry.sol#L196) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2441f4ff8c658d5361dded825dcbf356eea3badc36c6df761d379f93a49c4bb4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.updateOriginPlatformFee(uint16)._originPlatformFee (contracts/TalentLayerEscrow.sol#250) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.updateOriginPlatformFee(uint16)._originPlatformFee](contracts/TalentLayerEscrow.sol#L250) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 250,
                  "endLine": 250
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "25daa6bebf87efba22863d6068bb70659e6a6fa04dfb1425b19b90d49d46d077"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.getOriginatorPlatformIdByAddress(address)._address (contracts/TalentLayerID.sol#121) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.getOriginatorPlatformIdByAddress(address)._address](contracts/TalentLayerID.sol#L121) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "25f3cef28ee355749ea8d26fb132513623a4cb56231404b1ece2ac57fbd81973"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.updateMintFee(uint256)._mintFee (contracts/TalentLayerID.sol#236) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.updateMintFee(uint256)._mintFee](contracts/TalentLayerID.sol#L236) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 236,
                  "endLine": 236
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "27bb51559d147d7ae67821be168f3340f2bc8942d7c290b26066897c6f7c8f75"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.getPlatformIdFromAddress(address)._owner (contracts/TalentLayerPlatformID.sol#87) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.getPlatformIdFromAddress(address)._owner](contracts/TalentLayerPlatformID.sol#L87) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b8bec75ff4096f61ff61dc3c681458f1b39f8cb39ed87845b038e54bf4cc34f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerArbitrator.setArbitrationPrice(uint256)._arbitrationPrice (contracts/TalentLayerArbitrator.sol#39) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerArbitrator.setArbitrationPrice(uint256)._arbitrationPrice](contracts/TalentLayerArbitrator.sol#L39) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e978b51e15026f17cdd173d277f0672f23629b59cb1c9d528128a063b375cf3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.mint(string)._platformName (contracts/TalentLayerPlatformID.sol#117) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.mint(string)._platformName](contracts/TalentLayerPlatformID.sol#L117) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f7c63684327b89584eb990f472a3e4ab84560b2204040c9a82ff8512c800b26"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerArbitrator.currentRuling(uint256)._disputeID (contracts/TalentLayerArbitrator.sol#122) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerArbitrator.currentRuling(uint256)._disputeID](contracts/TalentLayerArbitrator.sol#L122) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f8cb7ba85c55d414e88cae2ae6249ac6361af66b167527db3dd037f7efe211c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.walletOfOwner(address)._owner (contracts/TalentLayerID.sol#94) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.walletOfOwner(address)._owner](contracts/TalentLayerID.sol#L94) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "31e80ea301f169d74d0dfa635b6b74653a5969da3512a24e1a50d4bfb90a9720"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.updateProposal(uint256,address,uint256,string)._proposalDataUri (contracts/ServiceRegistry.sol#235) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.updateProposal(uint256,address,uint256,string)._proposalDataUri](contracts/ServiceRegistry.sol#L235) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3929f1c4158fee712e2a068b9a590cee7e536e9545381b8721bf6b08c14ab849"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.getPlatform(uint256)._platformId (contracts/TalentLayerPlatformID.sol#77) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.getPlatform(uint256)._platformId](contracts/TalentLayerPlatformID.sol#L77) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a564c3a7d858c901c6e59c11b240890d94817f7b7087ec5428519f92826ec2c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.createOpenServiceFromBuyer(uint256,string)._serviceDataUri (contracts/ServiceRegistry.sol#180) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.createOpenServiceFromBuyer(uint256,string)._serviceDataUri](contracts/ServiceRegistry.sol#L180) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 180
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3d6d17aedc4778f51241dbeb6a4a3e26469f90552a2e102cfb5108bc36013030"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.claim(uint256,address)._tokenAddress (contracts/TalentLayerEscrow.sol#402) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.claim(uint256,address)._tokenAddress](contracts/TalentLayerEscrow.sol#L402) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3ff885ed4e015ba3388487cc865bb1d94a6e8d453fef35ba888a8a471ff9a229"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.afterDeposit(uint256,uint256,uint256)._transactionId (contracts/ServiceRegistry.sol#306) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.afterDeposit(uint256,uint256,uint256)._transactionId](contracts/ServiceRegistry.sol#L306) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 306,
                  "endLine": 306
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4022323c4e161cff4e15137d224324d17dfcb053e5071317ef76ebd54d1d4d2d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.updateProposal(uint256,address,uint256,string)._serviceId (contracts/ServiceRegistry.sol#232) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.updateProposal(uint256,address,uint256,string)._serviceId](contracts/ServiceRegistry.sol#L232) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44bb963d0ac9678a0e9c7ed74cad23e6f5f50e35d3c3c30e879efb444d9e5c12"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract ERC721A__IERC721Receiver (contracts/libs/ERC721A.sol#12-19) is not in CapWords\n",
            "markdown": "Contract [ERC721A__IERC721Receiver](contracts/libs/ERC721A.sol#L12-L19) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/ERC721A.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c7aecf854aee0dceefa536db98204e12d29d6f02062537f1ea04dab0a471e63"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerReview.addReview(uint256,string,uint256,uint256)._platformId (contracts/TalentLayerReview.sol#130) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerReview.addReview(uint256,string,uint256,uint256)._platformId](contracts/TalentLayerReview.sol#L130) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "517b64c236f5fd3c03cdea3533e43e59a4a438bc7b7c805772aa366cc6ca1122"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.createProposal(uint256,address,uint256,string)._rateToken (contracts/ServiceRegistry.sol#195) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.createProposal(uint256,address,uint256,string)._rateToken](contracts/ServiceRegistry.sol#L195) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 195,
                  "endLine": 195
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "573d30c1f80965eaa2aeb2a4f080589cf06d1f3ee78db305d0b450f8281c16f4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.afterFullPayment(uint256)._serviceId (contracts/ServiceRegistry.sol#321) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.afterFullPayment(uint256)._serviceId](contracts/ServiceRegistry.sol#L321) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59c8c95e0cf1e41bc58c9c4731960a034fea8b5ff18399d76b75af6a737cb3a1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.afterDeposit(uint256,uint256,uint256)._serviceId (contracts/ServiceRegistry.sol#304) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.afterDeposit(uint256,uint256,uint256)._serviceId](contracts/ServiceRegistry.sol#L304) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5b2d926cdb5fe8589069e8c92e03550011432c09f023ad120dae163ce270f91e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerArbitrator.disputeStatus(uint256)._disputeID (contracts/TalentLayerArbitrator.sol#114) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerArbitrator.disputeStatus(uint256)._disputeID](contracts/TalentLayerArbitrator.sol#L114) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60af786ecf30d3341402acc5e70a11d07e9a44b151abc0c75b087b8572bdb60c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.updateProposal(uint256,address,uint256,string)._rateAmount (contracts/ServiceRegistry.sol#234) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.updateProposal(uint256,address,uint256,string)._rateAmount](contracts/ServiceRegistry.sol#L234) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6221bf818b6e6be587ae2f191e9b61308cde75f2274a2a115f04b91b79c00944"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.getProposal(uint256,uint256)._proposalId (contracts/ServiceRegistry.sol#169) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.getProposal(uint256,uint256)._proposalId](contracts/ServiceRegistry.sol#L169) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "62a25ff29065f4a5550c68fc274a95fbf2f992e3dd8a3e4ea1abd6effd119759"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.createETHTransaction(uint256,string,uint256,uint256)._serviceId (contracts/TalentLayerEscrow.sol#277) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.createETHTransaction(uint256,string,uint256,uint256)._serviceId](contracts/TalentLayerEscrow.sol#L277) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6586dea9cf806a69ecd76ec72f6b6834c6b1dfd3ea8a46c0a3ab6b87dac2f28e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.getPlatformFee(uint256)._platformId (contracts/TalentLayerPlatformID.sol#73) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.getPlatformFee(uint256)._platformId](contracts/TalentLayerPlatformID.sol#L73) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6608cef29e5c31fbe44d3437f4effef6a70afb6dca3091b002deae57287650fe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerReview.addReview(uint256,string,uint256,uint256)._rating (contracts/TalentLayerReview.sol#130) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerReview.addReview(uint256,string,uint256,uint256)._rating](contracts/TalentLayerReview.sol#L130) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "686118e78c6ea8528b27995f19ea1f1aa14148fc1ad9033a4c03a5154f411c43"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.mintWithPoh(uint256,string)._handle (contracts/TalentLayerID.sol#150) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.mintWithPoh(uint256,string)._handle](contracts/TalentLayerID.sol#L150) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6913f6ca4c17c8d69e9eee737876a38ad25db34f93eab3e5278aa09929ad0261"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.getService(uint256)._serviceId (contracts/ServiceRegistry.sol#164) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.getService(uint256)._serviceId](contracts/ServiceRegistry.sol#L164) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6bacf3c7abe196a6a506fc486c48843a71de7173e38bc5953b99564c767ddd32"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.afterDeposit(uint256,uint256,uint256)._proposalId (contracts/ServiceRegistry.sol#305) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.afterDeposit(uint256,uint256,uint256)._proposalId](contracts/ServiceRegistry.sol#L305) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 305,
                  "endLine": 305
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d64c2307a426ceb73d7830d4eb81c6bdaa05e9daa4f7e1cb1aa3284e686657d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.createETHTransaction(uint256,string,uint256,uint256)._proposalId (contracts/TalentLayerEscrow.sol#278) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.createETHTransaction(uint256,string,uint256,uint256)._proposalId](contracts/TalentLayerEscrow.sol#L278) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 278
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6ecccd4a803024541ca07e38db30f88c38ee8f30c8b0f6a34325749e8ea1bead"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.rejectProposal(uint256,uint256)._serviceId (contracts/ServiceRegistry.sol#279) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.rejectProposal(uint256,uint256)._serviceId](contracts/ServiceRegistry.sol#L279) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f04106db3f24a7329a6a4b1fdd5d7e0a28d095154286f795f59a67f1aec1041"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.release(uint256,uint256)._transactionId (contracts/TalentLayerEscrow.sol#360) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.release(uint256,uint256)._transactionId](contracts/TalentLayerEscrow.sol#L360) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 360,
                  "endLine": 360
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "70a1b562f2c5e7152c0c1fed14fa393ce4af2b193dd900e663ffec9d1d1f4bb8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.updatePlatformfee(uint256,uint16)._platformfee (contracts/TalentLayerPlatformID.sol#153) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.updatePlatformfee(uint256,uint16)._platformfee](contracts/TalentLayerPlatformID.sol#L153) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 153
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7189c8e7abaafff2992ed2e8b5569b19e26860ad3c4a4779228dd7d44abf1269"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.getProposal(uint256,uint256)._serviceId (contracts/ServiceRegistry.sol#169) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.getProposal(uint256,uint256)._serviceId](contracts/ServiceRegistry.sol#L169) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "790b8fe31a824cd1c2289e03a6e974941c1a59ae6e1b73f3d077174fad769de4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockProofOfHumanity.isRegistered(address)._submissionID (contracts/Mocks/MockProofOfHumanity.sol#35) is not in mixedCase\n",
            "markdown": "Parameter [MockProofOfHumanity.isRegistered(address)._submissionID](contracts/Mocks/MockProofOfHumanity.sol#L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Mocks/MockProofOfHumanity.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "81f102d8716412dc90d9453e5815ae29e5cb6f7b38d10fe7310d3bc17e6ae499"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.updateServiceData(uint256,string)._serviceId (contracts/ServiceRegistry.sol#331) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.updateServiceData(uint256,string)._serviceId](contracts/ServiceRegistry.sol#L331) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 331,
                  "endLine": 331
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "83aa02620ae44627a855c921c0d501b0a84b9b210f1a860ca6a952c82421010b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Arbitrator.createDispute(uint256,bytes)._extraData (contracts/Arbitrator.sol#54) is not in mixedCase\n",
            "markdown": "Parameter [Arbitrator.createDispute(uint256,bytes)._extraData](contracts/Arbitrator.sol#L54) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Arbitrator.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "83ee91586bbe524c8f06f75fe5130181a7b327d6da22e7f75b109dba0644261e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Arbitrator.appeal(uint256,bytes)._extraData (contracts/Arbitrator.sol#72) is not in mixedCase\n",
            "markdown": "Parameter [Arbitrator.appeal(uint256,bytes)._extraData](contracts/Arbitrator.sol#L72) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Arbitrator.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8488d28de9c491c8ed3a3eba0a1649d54fe25aea46b40cddedd01766a464dee1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerArbitrator.giveRuling(uint256,uint256)._ruling (contracts/TalentLayerArbitrator.sol#106) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerArbitrator.giveRuling(uint256,uint256)._ruling](contracts/TalentLayerArbitrator.sol#L106) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "893683a2a862bdb64eb9b590f11bc7348867ef415052c085b98329c4df4571e7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.getTransactionDetails(uint256)._transactionId (contracts/TalentLayerEscrow.sol#223) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.getTransactionDetails(uint256)._transactionId](contracts/TalentLayerEscrow.sol#L223) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 223
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e1c696337635b251afa1d4e193ac4aab21f45662203bdeaafd50bbe54fb6599"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ITalentLayerID._afterMint(string) (contracts/interfaces/ITalentLayerID.sol#44) is not in mixedCase\n",
            "markdown": "Function [ITalentLayerID._afterMint(string)](contracts/interfaces/ITalentLayerID.sol#L44) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ITalentLayerID.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ec746d34a3881167255549d85532da392f4cc9ba534e5750ddffcb93fe13bb8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.mintWithPoh(uint256,string)._platformId (contracts/TalentLayerID.sol#150) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.mintWithPoh(uint256,string)._platformId](contracts/TalentLayerID.sol#L150) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90b882c1a25a3f485518f51ca439ac5498855397646ddd4459682af764e24e4c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.validateProposal(uint256,uint256)._serviceId (contracts/ServiceRegistry.sol#259) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.validateProposal(uint256,uint256)._serviceId](contracts/ServiceRegistry.sol#L259) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 259
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9174e0259b651e3e297ba2468ef10afa21e60eade3bafa5cb578ece18f8513de"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.numberMinted(address)._platformAddress (contracts/TalentLayerPlatformID.sol#69) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.numberMinted(address)._platformAddress](contracts/TalentLayerPlatformID.sol#L69) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "922ab993f3343aa532e9eda91f0cd978f3a9b1670b72356841230c5608eae4bb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.numberMinted(address)._user (contracts/TalentLayerID.sol#71) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.numberMinted(address)._user](contracts/TalentLayerID.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a2895b67aa0c0aa53a6831208ef40a14e012ba67b8a4dce7edf2b143fbeb996b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.isTokenPohRegistered(uint256)._tokenId (contracts/TalentLayerID.sol#85) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.isTokenPohRegistered(uint256)._tokenId](contracts/TalentLayerID.sol#L85) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a86c17be4cf6a9faddc98021baf28e3ecc955c80b02583024c1ec2733bb745bd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerReview.addReview(uint256,string,uint256,uint256)._reviewUri (contracts/TalentLayerReview.sol#130) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerReview.addReview(uint256,string,uint256,uint256)._reviewUri](contracts/TalentLayerReview.sol#L130) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab09fec2dbfefc7076d4f8c03aa8fc94dac79b975580228fd865edea14e637da"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.createTokenTransaction(uint256,string,uint256,uint256)._serviceId (contracts/TalentLayerEscrow.sol#322) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.createTokenTransaction(uint256,string,uint256,uint256)._serviceId](contracts/TalentLayerEscrow.sol#L322) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 322,
                  "endLine": 322
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad5fdaab9e88a6525a4101de0142eabdc909f7c3ce966a82bc125e4855687fb8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.mint(uint256,string)._handle (contracts/TalentLayerID.sol#140) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.mint(uint256,string)._handle](contracts/TalentLayerID.sol#L140) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ae73daf5f8b86f148f2504d6bf65b1c3bae7af93702df355c288a8816e54f128"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerReview.getApproved(uint256)._tokenId (contracts/TalentLayerReview.sol#379) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerReview.getApproved(uint256)._tokenId](contracts/TalentLayerReview.sol#L379) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 379
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aef3ad7adf9e6c9e0dd4c1611d807b015238fef2c785c68e052d5a0dd7877fd3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.activatePoh(uint256)._tokenId (contracts/TalentLayerID.sol#162) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.activatePoh(uint256)._tokenId](contracts/TalentLayerID.sol#L162) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b1bb8f58ad7ba171fd48af62d4d67099844f49e2aa082c83cd96291654e87f7c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.updateServiceData(uint256,string)._newServiceDataUri (contracts/ServiceRegistry.sol#331) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.updateServiceData(uint256,string)._newServiceDataUri](contracts/ServiceRegistry.sol#L331) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 331,
                  "endLine": 331
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b8ea45256d7206b665b55e8da49784ec99a0037481cf834923988ac9907d76d9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.createProposal(uint256,address,uint256,string)._serviceId (contracts/ServiceRegistry.sol#194) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.createProposal(uint256,address,uint256,string)._serviceId](contracts/ServiceRegistry.sol#L194) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 194
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bf5d96ed7c77e988315a68993e46b74f4f5aab8d64a03a3e8b2c0d86c838c340"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerReview.addReview(uint256,string,uint256,uint256)._serviceId (contracts/TalentLayerReview.sol#130) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerReview.addReview(uint256,string,uint256,uint256)._serviceId](contracts/TalentLayerReview.sol#L130) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c10f28f588899a6c227379834fd31bf7e7b1af6597939552f1aad9650ee39cda"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerArbitrator.giveRuling(uint256,uint256)._disputeID (contracts/TalentLayerArbitrator.sol#106) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerArbitrator.giveRuling(uint256,uint256)._disputeID](contracts/TalentLayerArbitrator.sol#L106) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c19681df2c028ccac5e7cc4038f1045317f5e8a8412dd608aec50c322987fb42"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.rejectProposal(uint256,uint256)._proposalId (contracts/ServiceRegistry.sol#279) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.rejectProposal(uint256,uint256)._proposalId](contracts/ServiceRegistry.sol#L279) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c42d89af93ab234311d31bfd2d3a1b64ec9e547b2aa6caeca24ce403e5e19d70"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.createTokenTransaction(uint256,string,uint256,uint256)._proposalId (contracts/TalentLayerEscrow.sol#323) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.createTokenTransaction(uint256,string,uint256,uint256)._proposalId](contracts/TalentLayerEscrow.sol#L323) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 323,
                  "endLine": 323
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6c5d37bda7998e6cbe1d7f6db7788411a4d009ebb893a743af7277209fc20b8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerArbitrator.createDispute(uint256,bytes)._extraData (contracts/TalentLayerArbitrator.sol#66) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerArbitrator.createDispute(uint256,bytes)._extraData](contracts/TalentLayerArbitrator.sol#L66) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerArbitrator.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c753ba7d732858cd465cf9e73dcfcebe579bc6d1a23faa4e08a21ccda686c5ac"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.updateProfileData(uint256,string)._newCid (contracts/TalentLayerID.sol#176) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.updateProfileData(uint256,string)._newCid](contracts/TalentLayerID.sol#L176) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cc5b81f474baf889b923f7660531c777e4d389a61e3ada9ee237a1156e1626e4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.updateProfileData(uint256,string)._platformId (contracts/TalentLayerPlatformID.sol#139) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.updateProfileData(uint256,string)._platformId](contracts/TalentLayerPlatformID.sol#L139) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d0dcb310514686ae8521ee95ec0c3ee1355afd5916ba0e753b733d297b4dbbc1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockProofOfHumanity.addSubmissionManually(address[])._submissionIDs (contracts/Mocks/MockProofOfHumanity.sol#29) is not in mixedCase\n",
            "markdown": "Parameter [MockProofOfHumanity.addSubmissionManually(address[])._submissionIDs](contracts/Mocks/MockProofOfHumanity.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Mocks/MockProofOfHumanity.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4fbd1a78b59385af56207ef2e6b1b98feb5daeec47c3217444073afa3c8dcb4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.mint(uint256,string)._platformId (contracts/TalentLayerID.sol#140) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.mint(uint256,string)._platformId](contracts/TalentLayerID.sol#L140) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d54557d463ca83ad80be3e217027410517f7733d7c3976837c93a8d274b0fec7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.claim(uint256,address)._platformId (contracts/TalentLayerEscrow.sol#402) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.claim(uint256,address)._platformId](contracts/TalentLayerEscrow.sol#L402) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d647d7e8722f25ef8a863f51f94fb17cba010b98be4b08c24f2d4062afc3cf3f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerReview.getReview(uint256)._reviewId (contracts/TalentLayerReview.sol#116) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerReview.getReview(uint256)._reviewId](contracts/TalentLayerReview.sol#L116) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d68bed0444cfdf78811f646684f7003f66ef2d6795a5bb68a967e286832d1768"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._index (contracts/TalentLayerID.sol#196) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._index](contracts/TalentLayerID.sol#L196) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6d071c7aea431651ee225fc6749de5616bc2878e143a183e843cee834df3b89"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Modifier TalentLayerReview.RequireMinted(uint256) (contracts/TalentLayerReview.sol#428-431) is not in mixedCase\n",
            "markdown": "Modifier [TalentLayerReview.RequireMinted(uint256)](contracts/TalentLayerReview.sol#L428-L431) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 431
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "da66b7a1e56b9be741fcc7d4afbf6491b39858f0aeeea4b364f0d804b9b4b1b8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.updateProtocolWallet(address)._protocolWallet (contracts/TalentLayerEscrow.sol#260) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.updateProtocolWallet(address)._protocolWallet](contracts/TalentLayerEscrow.sol#L260) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 260,
                  "endLine": 260
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "da93646b61c75e19583f6879767b82993fd7481d59851863d4823b28f5ccfeed"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.reimburse(uint256,uint256)._amount (contracts/TalentLayerEscrow.sol#381) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.reimburse(uint256,uint256)._amount](contracts/TalentLayerEscrow.sol#L381) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 381
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dc7abe018af051f549de5cac98bc7045b71cf46653ea5415cffe1d2e9913e7b9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.isValid(uint256)._tokenId (contracts/TalentLayerID.sol#129) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.isValid(uint256)._tokenId](contracts/TalentLayerID.sol#L129) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "df22ffdffc471340ed38c22d500874960b745bfe4ae49320e4086d4f36611657"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.updateProtocolFee(uint16)._protocolFee (contracts/TalentLayerEscrow.sol#240) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.updateProtocolFee(uint16)._protocolFee](contracts/TalentLayerEscrow.sol#L240) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 240,
                  "endLine": 240
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "df5940138adaf3f09816aadbf67e80fc3f9d4e61866933442e3cafa0829a3eb1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._recoveryKey (contracts/TalentLayerID.sol#197) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._recoveryKey](contracts/TalentLayerID.sol#L197) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e1d926eda7a4586bd21fe7356b050170f561fd60afb28acf8ece8e0e3ba9e9e3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.createOpenServiceFromBuyer(uint256,string)._platformId (contracts/ServiceRegistry.sol#180) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.createOpenServiceFromBuyer(uint256,string)._platformId](contracts/ServiceRegistry.sol#L180) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 180
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e24a7766fd212da29bbcad5979c0baca934a70cb2c46e12dbf7f246b2d336293"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.mintForAddress(string,address)._platformName (contracts/TalentLayerPlatformID.sol#128) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.mintForAddress(string,address)._platformName](contracts/TalentLayerPlatformID.sol#L128) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e272e01d4c43eec56c3062db06da51a286c32db009089fef8e4736cd32978be9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._oldAddress (contracts/TalentLayerID.sol#194) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._oldAddress](contracts/TalentLayerID.sol#L194) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 194
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e3b3f60ec2afd74c93e12e385ed2cdf9e2727ecd18329b4e91faac0615ab8aea"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._handle (contracts/TalentLayerID.sol#198) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._handle](contracts/TalentLayerID.sol#L198) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e43ffeef17814357cf76b982992482a6fdac78036278821beb6d261ad1afc23e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerEscrow.getClaimableFeeBalance(address)._token (contracts/TalentLayerEscrow.sol#207) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerEscrow.getClaimableFeeBalance(address)._token](contracts/TalentLayerEscrow.sol#L207) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 207,
                  "endLine": 207
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e59519f03c320f578b2e0f4fb4ef9c632eb198c8651a589262d56c3848c52cea"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable TalentLayerReview._totalSupply (contracts/TalentLayerReview.sol#46) is not in mixedCase\n",
            "markdown": "Variable [TalentLayerReview._totalSupply](contracts/TalentLayerReview.sol#L46) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerReview.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e5f1c7e3f90f7d0a76ff9cc5951edac84e2f237950bd6611fd88512eb92c6f63"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.getProfile(uint256)._profileId (contracts/TalentLayerID.sol#75) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.getProfile(uint256)._profileId](contracts/TalentLayerID.sol#L75) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e89523383c7bfd676c9494bb04e735e6de3784d5a73e5088955bf215d33d630a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._tokenId (contracts/TalentLayerID.sol#195) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.recoverAccount(address,uint256,uint256,uint256,string,bytes32[])._tokenId](contracts/TalentLayerID.sol#L195) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 195,
                  "endLine": 195
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e89584252901037acf30c5c9294ad35e56a6236225c4b24c771dcd59f46bb824"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.updateProposal(uint256,address,uint256,string)._rateToken (contracts/ServiceRegistry.sol#233) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.updateProposal(uint256,address,uint256,string)._rateToken](contracts/ServiceRegistry.sol#L233) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 233,
                  "endLine": 233
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea9a1950f818f1f9f699ff7b0b52fe029a9d2182e8872339e510e0bebf656414"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ServiceRegistry.validateProposal(uint256,uint256)._proposalId (contracts/ServiceRegistry.sol#259) is not in mixedCase\n",
            "markdown": "Parameter [ServiceRegistry.validateProposal(uint256,uint256)._proposalId](contracts/ServiceRegistry.sol#L259) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ServiceRegistry.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 259
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f0d7b086898c35b4eb8db85f925e25975e6e825d6637def82e5aa699ff47e380"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.updateMintFee(uint256)._mintFee (contracts/TalentLayerPlatformID.sol#173) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.updateMintFee(uint256)._mintFee](contracts/TalentLayerPlatformID.sol#L173) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 173
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2038637c09bad03076a32adea427d5544f901182bb0774e3c41c764aed1119c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.updatePlatformfee(uint256,uint16)._platformId (contracts/TalentLayerPlatformID.sol#153) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.updatePlatformfee(uint256,uint16)._platformId](contracts/TalentLayerPlatformID.sol#L153) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 153
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f46b845e3406365ef0ffc5ceba06d44bc4fd8468271c2ba6f8eec53114522926"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Arbitrator.appeal(uint256,bytes)._disputeID (contracts/Arbitrator.sol#72) is not in mixedCase\n",
            "markdown": "Parameter [Arbitrator.appeal(uint256,bytes)._disputeID](contracts/Arbitrator.sol#L72) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Arbitrator.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6c1a47fbf54534ad4b44007a9f5eb4191df1b9b32ba9384082f1fe49dd29e60"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.updateRecoveryRoot(bytes32)._newRoot (contracts/TalentLayerPlatformID.sol#165) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.updateRecoveryRoot(bytes32)._newRoot](contracts/TalentLayerPlatformID.sol#L165) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd376e58d66c1c4a58d00a391dd230e470c2afae802120b9e6e1f13bbdd9fc4c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerID.updateProfileData(uint256,string)._tokenId (contracts/TalentLayerID.sol#176) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerID.updateProfileData(uint256,string)._tokenId](contracts/TalentLayerID.sol#L176) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerID.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fdae4d146b80ce1383a8ea018d65d62704f584b90a673bb50627649ca112cb76"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TalentLayerPlatformID.mintForAddress(string,address)._platformAddress (contracts/TalentLayerPlatformID.sol#128) is not in mixedCase\n",
            "markdown": "Parameter [TalentLayerPlatformID.mintForAddress(string,address)._platformAddress](contracts/TalentLayerPlatformID.sol#L128) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerPlatformID.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fe66cc7da0272c8723f1a241434fd0c3a5f1df0c2e41775aa3349b059e177c54"
          }
        },
        {
          "ruleId": "3-1-reentrancy-unlimited-gas",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.claim(uint256,address) (contracts/TalentLayerEscrow.sol#402-418):\n\tExternal calls:\n\t- _transferBalance(recipient,_tokenAddress,amount) (contracts/TalentLayerEscrow.sol#415)\n\t\t- _recipient.transfer(_amount) (contracts/TalentLayerEscrow.sol#602)\n\tEvent emitted after the call(s):\n\t- FeesClaimed(_platformId,_tokenAddress,amount) (contracts/TalentLayerEscrow.sol#417)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.claim(uint256,address)](contracts/TalentLayerEscrow.sol#L402-L418):\n\tExternal calls:\n\t- [_transferBalance(recipient,_tokenAddress,amount)](contracts/TalentLayerEscrow.sol#L415)\n\t\t- [_recipient.transfer(_amount)](contracts/TalentLayerEscrow.sol#L602)\n\tEvent emitted after the call(s):\n\t- [FeesClaimed(_platformId,_tokenAddress,amount)](contracts/TalentLayerEscrow.sol#L417)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 418
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03f3d116dd3411c88ea06387e1eb5a3f8ea07ba7861113381bff9f96193083c2"
          }
        },
        {
          "ruleId": "3-1-reentrancy-unlimited-gas",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.release(uint256,uint256) (contracts/TalentLayerEscrow.sol#360-373):\n\tExternal calls:\n\t- _release(transaction,_amount) (contracts/TalentLayerEscrow.sol#368)\n\t\t- address(_transaction.receiver).transfer(_releaseAmount) (contracts/TalentLayerEscrow.sol#496)\n\tEvent emitted after the call(s):\n\t- Payment(PaymentType.Release,_amount,transaction.token,transaction.serviceId) (contracts/TalentLayerEscrow.sol#370)\n\t- PaymentCompleted(_serviceId) (contracts/TalentLayerEscrow.sol#543)\n\t\t- _distributeMessage(transaction.serviceId,transaction.amount) (contracts/TalentLayerEscrow.sol#372)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.release(uint256,uint256)](contracts/TalentLayerEscrow.sol#L360-L373):\n\tExternal calls:\n\t- [_release(transaction,_amount)](contracts/TalentLayerEscrow.sol#L368)\n\t\t- [address(_transaction.receiver).transfer(_releaseAmount)](contracts/TalentLayerEscrow.sol#L496)\n\tEvent emitted after the call(s):\n\t- [Payment(PaymentType.Release,_amount,transaction.token,transaction.serviceId)](contracts/TalentLayerEscrow.sol#L370)\n\t- [PaymentCompleted(_serviceId)](contracts/TalentLayerEscrow.sol#L543)\n\t\t- [_distributeMessage(transaction.serviceId,transaction.amount)](contracts/TalentLayerEscrow.sol#L372)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 360,
                  "endLine": 373
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65218ac917f2d4c79b6316b4a8d3a9f4e79a2630d7745834e4b06994c630be7d"
          }
        },
        {
          "ruleId": "3-1-reentrancy-unlimited-gas",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow._release(TalentLayerEscrow.Transaction,uint256) (contracts/TalentLayerEscrow.sol#479-511):\n\tExternal calls:\n\t- address(_transaction.receiver).transfer(_releaseAmount) (contracts/TalentLayerEscrow.sol#496)\n\tEvent emitted after the call(s):\n\t- OriginPlatformFeeReleased(originPlatformId,_transaction.serviceId,_transaction.token,originPlatformFeeAmount) (contracts/TalentLayerEscrow.sol#504-509)\n\t- PlatformFeeReleased(platformId,_transaction.serviceId,_transaction.token,platformFeeAmount) (contracts/TalentLayerEscrow.sol#510)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow._release(TalentLayerEscrow.Transaction,uint256)](contracts/TalentLayerEscrow.sol#L479-L511):\n\tExternal calls:\n\t- [address(_transaction.receiver).transfer(_releaseAmount)](contracts/TalentLayerEscrow.sol#L496)\n\tEvent emitted after the call(s):\n\t- [OriginPlatformFeeReleased(originPlatformId,_transaction.serviceId,_transaction.token,originPlatformFeeAmount)](contracts/TalentLayerEscrow.sol#L504-L509)\n\t- [PlatformFeeReleased(platformId,_transaction.serviceId,_transaction.token,platformFeeAmount)](contracts/TalentLayerEscrow.sol#L510)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 479,
                  "endLine": 511
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3ed591f389375d12387f6456c1755c2de47ca76dfe1ea5ed0890097b9122a8a"
          }
        },
        {
          "ruleId": "3-1-reentrancy-unlimited-gas",
          "message": {
            "text": "Reentrancy in TalentLayerEscrow.reimburse(uint256,uint256) (contracts/TalentLayerEscrow.sol#381-394):\n\tExternal calls:\n\t- _reimburse(transaction,_amount) (contracts/TalentLayerEscrow.sol#389)\n\t\t- address(_transaction.sender).transfer(totalReleaseAmount) (contracts/TalentLayerEscrow.sol#526)\n\tEvent emitted after the call(s):\n\t- Payment(PaymentType.Reimburse,_amount,transaction.token,transaction.serviceId) (contracts/TalentLayerEscrow.sol#391)\n\t- PaymentCompleted(_serviceId) (contracts/TalentLayerEscrow.sol#543)\n\t\t- _distributeMessage(transaction.serviceId,transaction.amount) (contracts/TalentLayerEscrow.sol#393)\n",
            "markdown": "Reentrancy in [TalentLayerEscrow.reimburse(uint256,uint256)](contracts/TalentLayerEscrow.sol#L381-L394):\n\tExternal calls:\n\t- [_reimburse(transaction,_amount)](contracts/TalentLayerEscrow.sol#L389)\n\t\t- [address(_transaction.sender).transfer(totalReleaseAmount)](contracts/TalentLayerEscrow.sol#L526)\n\tEvent emitted after the call(s):\n\t- [Payment(PaymentType.Reimburse,_amount,transaction.token,transaction.serviceId)](contracts/TalentLayerEscrow.sol#L391)\n\t- [PaymentCompleted(_serviceId)](contracts/TalentLayerEscrow.sol#L543)\n\t\t- [_distributeMessage(transaction.serviceId,transaction.amount)](contracts/TalentLayerEscrow.sol#L393)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 394
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c797fc35fca6812d86b1ec9224694f910c0c161791c685c9293c360013d6bee1"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable TalentLayerEscrow._release(TalentLayerEscrow.Transaction,uint256)._transaction (contracts/TalentLayerEscrow.sol#479) is too similar to TalentLayerEscrow.transactions (contracts/TalentLayerEscrow.sol#122)\n",
            "markdown": "Variable [TalentLayerEscrow._release(TalentLayerEscrow.Transaction,uint256)._transaction](contracts/TalentLayerEscrow.sol#L479) is too similar to [TalentLayerEscrow.transactions](contracts/TalentLayerEscrow.sol#L122)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 479,
                  "endLine": 479
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e2bd54fd1b68f7222cbc097e025d1d987b4ef69300b448ded2e22628a54c93e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable TalentLayerEscrow._reimburse(TalentLayerEscrow.Transaction,uint256)._transaction (contracts/TalentLayerEscrow.sol#520) is too similar to TalentLayerEscrow.transactions (contracts/TalentLayerEscrow.sol#122)\n",
            "markdown": "Variable [TalentLayerEscrow._reimburse(TalentLayerEscrow.Transaction,uint256)._transaction](contracts/TalentLayerEscrow.sol#L520) is too similar to [TalentLayerEscrow.transactions](contracts/TalentLayerEscrow.sol#L122)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TalentLayerEscrow.sol"
                },
                "region": {
                  "startLine": 520,
                  "endLine": 520
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a2f3d681a54a631503f3e023bf72a7edecac28f10508344933a7913d9d0bebf3"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "SimpleERC20.constructor() (contracts/tests/SimpleERC20.sol#9-12) uses literals with too many digits:\n\t- _mint(msg.sender,1000000000000000000000000) (contracts/tests/SimpleERC20.sol#10)\n",
            "markdown": "[SimpleERC20.constructor()](contracts/tests/SimpleERC20.sol#L9-L12) uses literals with too many digits:\n\t- [_mint(msg.sender,1000000000000000000000000)](contracts/tests/SimpleERC20.sol#L10)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tests/SimpleERC20.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 12
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0cd3ffec9d365b2e5054e1f6527beca04c72c5d1902a1dc5ccd59c4458a1f6d4"
          }
        },
        {
          "ruleId": "3-0-unimplemented-functions",
          "message": {
            "text": "Arbitrable (contracts/Arbitrable.sol#15-49) does not implement functions:\n\t- Arbitrable.executeRuling(uint256,uint256) (contracts/Arbitrable.sol#48)\n",
            "markdown": "[Arbitrable](contracts/Arbitrable.sol#L15-L49) does not implement functions:\n\t- [Arbitrable.executeRuling(uint256,uint256)](contracts/Arbitrable.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Arbitrable.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1ef17d2e6694951ab39f33092370dd7442c676ba373e03c6f21b2c69fd8972ed"
          }
        }
      ]
    }
  ]
}